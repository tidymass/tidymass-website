
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"6c8f83b353f9cd5494363c4d459486cf","permalink":"https://www.tidymass.org/author/chuchu-wang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/chuchu-wang/","section":"authors","summary":"","tags":null,"title":"Chuchu Wang","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"0803189b47006c16c4c635b8a83aa7c3","permalink":"https://www.tidymass.org/author/hanxiang-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/hanxiang-li/","section":"authors","summary":"","tags":null,"title":"Hanxiang Li","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"e4455fe17c9aab75264e47c54f9d376e","permalink":"https://www.tidymass.org/author/hao-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/hao-li/","section":"authors","summary":"","tags":null,"title":"Hao Li","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2b3f722f080946000c7677d444fad4bf","permalink":"https://www.tidymass.org/author/hong-yan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/hong-yan/","section":"authors","summary":"","tags":null,"title":"Hong Yan","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"4f044a307b7f36cf588020eb3cafc52b","permalink":"https://www.tidymass.org/author/jiahui-zhao/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jiahui-zhao/","section":"authors","summary":"","tags":null,"title":"Jiahui Zhao","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"f7ccd463c1490ba263e648b9d3fec27f","permalink":"https://www.tidymass.org/author/kexin-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/kexin-li/","section":"authors","summary":"","tags":null,"title":"Kexin Li","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"260b28a8e8ddbab99b63e02657531734","permalink":"https://www.tidymass.org/author/lesong-mo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/lesong-mo/","section":"authors","summary":"","tags":null,"title":"Lesong Mo","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"b92c4865aeb51f8e7d0ad589128b542c","permalink":"https://www.tidymass.org/author/li-yan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/li-yan/","section":"authors","summary":"","tags":null,"title":"Li Yan","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"b4c468ce6442347078ebefc9f6dde3e8","permalink":"https://www.tidymass.org/author/linlin-xu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/linlin-xu/","section":"authors","summary":"","tags":null,"title":"Linlin Xu","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"f92085422a475372332780c21d7bb419","permalink":"https://www.tidymass.org/author/lu-wang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/lu-wang/","section":"authors","summary":"","tags":null,"title":"Lu Wang","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"1d8880f379800fb4ef366910c9ebdbc0","permalink":"https://www.tidymass.org/author/lu-zhang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/lu-zhang/","section":"authors","summary":"","tags":null,"title":"Lu Zhang","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"f8b78924cae240bb95036a558feddc0e","permalink":"https://www.tidymass.org/author/mac-lai/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/mac-lai/","section":"authors","summary":"","tags":null,"title":"Mac Lai","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"f0fd45d759842074c0584520f035a91c","permalink":"https://www.tidymass.org/author/muyao-xi/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/muyao-xi/","section":"authors","summary":"","tags":null,"title":"Muyao Xi","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"8a2f921bda3a473a6fa665b907fe7a95","permalink":"https://www.tidymass.org/author/peidong-song/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/peidong-song/","section":"authors","summary":"","tags":null,"title":"Peidong Song","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"83549a9cac129a119f395dd3edaa1dca","permalink":"https://www.tidymass.org/author/shuohan-cheng/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/shuohan-cheng/","section":"authors","summary":"","tags":null,"title":"Shuohan Cheng","type":"authors"},{"authors":null,"categories":null,"content":"I am a Postdoctoral Research Fellow in Prof. Michael Snyder‚Äôs lab at Stanford University School of Medicine. My overarching research interests are bioinformatics algorithms development for multi-omics data, and their application to precision medicine. Specifically, I am interested in bioinformatics algorithm development, including 1) Comprehensive analysis workflow and deep learning for LC-MS data, 2) Metabolic network analysis, 3) Wearable and multi-omics data integration, and 4) microbiome and metabolome data integration. I also employed the developed bioinformatics algorithms as a unique systems biology approach to study the potential biomarkers and mechanisms of 1) pregnancy and related diseases, 2) aging and related diseases, and 3) cancer. More tools and projects I developed can be found in the Projects part.\nNow I am also the member of Stanford Chinese Postdoctral Association (SCPA). Feel free to let me know if you want to join us and work for the amazing community!\nüê∂ üè´ üà∏ üòÑ üëä ‚úä üë®‚Äçüë©‚Äçüë¶ üêº üåè üéâ üá®üá≥\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://www.tidymass.org/author/xiaotao-shen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/xiaotao-shen/","section":"authors","summary":"I am a Postdoctoral Research Fellow in Prof. Michael Snyder‚Äôs lab at Stanford University School of Medicine. My overarching research interests are bioinformatics algorithms development for multi-omics data, and their application to precision medicine.","tags":null,"title":"Xiaotao Shen","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"37a6eb74fd9d6ad79e02f92578e91588","permalink":"https://www.tidymass.org/author/xiaoxiao-liu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/xiaoxiao-liu/","section":"authors","summary":"","tags":null,"title":"Xiaoxiao Liu","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"7ba1590779efad5a64111331bf5c88ce","permalink":"https://www.tidymass.org/author/xiuqiang-chen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/xiuqiang-chen/","section":"authors","summary":"","tags":null,"title":"Xiuqiang Chen","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"99f3d4792fb4063239e342ce406b587c","permalink":"https://www.tidymass.org/author/yang-ni/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/yang-ni/","section":"authors","summary":"","tags":null,"title":"Yang Ni","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"fe83cb4fa04f2084040ebb84fdf3d706","permalink":"https://www.tidymass.org/author/yongxia-zhang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/yongxia-zhang/","section":"authors","summary":"","tags":null,"title":"Yongxia Zhang","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3c97da5548c1fb8f7f8904c1c2925926","permalink":"https://www.tidymass.org/author/yukang-wu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/yukang-wu/","section":"authors","summary":"","tags":null,"title":"YuKang Wu","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"10234a55d65a5282b30e1bab08f1e20a","permalink":"https://www.tidymass.org/author/yunong-yang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/yunong-yang/","section":"authors","summary":"","tags":null,"title":"Yunong Yang","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"b1c917ab21b45620e666f62f41e874ca","permalink":"https://www.tidymass.org/author/zhonghua-lu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/zhonghua-lu/","section":"authors","summary":"","tags":null,"title":"ZhongHua Lu","type":"authors"},{"authors":null,"categories":null,"content":"You can install tidymass using different methods.\nUsing the methods from tidymass.org.\nFrom GitHub.\nFrom GitLab.\nFrom Gitee (Á†Å‰∫ë).\nYou can also learn how to update and install docker version of tidymass.\n","date":1693008000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1693008000,"objectID":"3a4ad83f0eb0486386a1a310701ecfa0","permalink":"https://www.tidymass.org/docs/chapter1/","publishdate":"2023-08-26T00:00:00Z","relpermalink":"/docs/chapter1/","section":"docs","summary":"How to install tidymass","tags":null,"title":"Install tidymass","type":"book"},{"authors":null,"categories":null,"content":"About massdataset provide the mass_dataset class which is specifically developed and designed to organize the rectangular metabolomics data sets into a standard structure. massdataset package also provide a lot of base processing functions to process and operate the mass_dataset class. In additional, the mass_dataset class can be processed by all the packages from tidymass.\nInstall massdataset You can install massdataset from GitLab.\nif(!require(remotes)){ install.packages(\u0026#34;remotes\u0026#34;) } remotes::install_gitlab(\u0026#34;jaspershen/massdataset\u0026#34;) or GitHub\nremotes::install_github(\u0026#34;tidymass/massdataset\u0026#34;) or tidymass.org\nsource(\u0026#34;https://www.tidymass.org/tidymass-packages/install_tidymass.txt\u0026#34;) install_tidymass(from = \u0026#34;tidymass.org\u0026#34;, which_package = \u0026#34;massdataset\u0026#34;) Citation If you use massdataset in your publications, please cite this paper:\nShen, X., Yan, H., Wang, C. et al. TidyMass an object-oriented reproducible analysis framework for LC‚ÄìMS data. Nat Commun 13, 4365 (2022).\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"848d75a615c6173d8d861f898a3a67ce","permalink":"https://www.tidymass.org/docs/chapter2/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter2/","section":"docs","summary":"massDataset package to organize microbiome data.","tags":null,"title":"massDataset package","type":"book"},{"authors":null,"categories":null,"content":"About massconverter can be used to convert mass spectrometry data to other format data based on msconvert docker image.\nNow this is only supports mac or Linux OS.\nInstallation You can install massconverter from GitLab.\nif(!require(remotes)){ install.packages(\u0026#34;remotes\u0026#34;) } remotes::install_gitlab(\u0026#34;jaspershen/massconverter\u0026#34;) or GitHub\nremotes::install_github(\u0026#34;tidymass/massconverter\u0026#34;) or tidymass.org\nsource(\u0026#34;https://www.tidymass.org/tidymass-packages/install_tidymass.txt\u0026#34;) install_tidymass(from = \u0026#34;tidymass.org\u0026#34;, which_package = \u0026#34;massconverter\u0026#34;) Citation If you use massconverter in your publications, please cite this paper:\nShen, X., Yan, H., Wang, C. et al. TidyMass an object-oriented reproducible analysis framework for LC‚ÄìMS data. Nat Commun 13, 4365 (2022). Weblink Thanks very much!\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"10afc9594f87bad3f07dc64799a1d2a7","permalink":"https://www.tidymass.org/docs/chapter3/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter3/","section":"docs","summary":"Data format converter","tags":null,"title":"Data format converter","type":"book"},{"authors":null,"categories":null,"content":"About massprocesser is a R package which is used for untargeted metabolomics raw data processing and analysis.\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"25679eb65c0e8dfb7e8ace4c60fe07cc","permalink":"https://www.tidymass.org/docs/chapter4/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter4/","section":"docs","summary":"Raw data processing","tags":null,"title":"Raw data processing","type":"book"},{"authors":null,"categories":null,"content":"About ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"b19ef890711f7ce8221ae9b15469c412","permalink":"https://www.tidymass.org/docs/chapter5/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter5/","section":"docs","summary":"Explore data","tags":null,"title":"Explore data","type":"book"},{"authors":null,"categories":null,"content":"About ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"f9210003ef0c1463a1512d31a898cf50","permalink":"https://www.tidymass.org/docs/chapter6/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter6/","section":"docs","summary":"Data cleaning","tags":null,"title":"Data cleaning","type":"book"},{"authors":null,"categories":null,"content":"Introduction In tidyMass, metid package is used for metabolite identification based on in-house database and public database based on accurate mass (m/z), retention time (RT) and/or MS2 spectra.\nInstallation You can install metid from GitLab.\nif(!require(remotes)){ install.packages(\u0026#34;remotes\u0026#34;) } remotes::install_gitlab(\u0026#34;jaspershen/metid\u0026#34;) or GitHub\nremotes::install_github(\u0026#34;tidymass/metid\u0026#34;) or tidymass.org\nsource(\u0026#34;https://www.tidymass.org/tidymass-packages/install_tidymass.txt\u0026#34;) install_tidymass(from = \u0026#34;tidymass.org\u0026#34;, which_package = \u0026#34;metid\u0026#34;) Citation If you use metid in your publications, please cite this paper:\nXiaotao Shen, Si Wu, Liang Liang, Songjie Chen, Kevin Contrepois, Zheng-Jiang Zhu*, Michael Snyder* (Corresponding Author). metID: A R package for automatable compound annotation for LC‚àíMS-based data. Bioinformatics, btab583, https://doi.org/10.1093/bioinformatics/btab583\nShen, X., Yan, H., Wang, C. et al. TidyMass an object-oriented reproducible analysis framework for LC‚ÄìMS data. Nat Commun 13, 4365 (2022). Weblink\nThanks very much!\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"f2bcc3d997031c983e1fdc772249e4aa","permalink":"https://www.tidymass.org/docs/chapter7/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter7/","section":"docs","summary":"Metabolite annotation","tags":null,"title":"Metabolite annotation","type":"book"},{"authors":null,"categories":null,"content":"About ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"fa36650ac5d0667eb1c50053d65db930","permalink":"https://www.tidymass.org/docs/chapter8/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter8/","section":"docs","summary":"Statistical analysis","tags":null,"title":"Statistical analysis","type":"book"},{"authors":null,"categories":null,"content":"About ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"7963765b8b3409c4fa6858b91b029e4a","permalink":"https://www.tidymass.org/docs/chapter9/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter9/","section":"docs","summary":"Pathway enrichment","tags":null,"title":"Pathway enrichment","type":"book"},{"authors":null,"categories":null,"content":"About ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"0c116b471a4cb01cc1f3311f3c762a47","permalink":"https://www.tidymass.org/docs/chapter10/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/chapter10/","section":"docs","summary":"Whole workflow using tidymass","tags":null,"title":"Whole workflow using tidymass","type":"book"},{"authors":null,"categories":null,"content":"There are some usefull tools in tidymass, you will learn how to use them in this chapter.\n","date":1695945600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1695945600,"objectID":"b3f3b4be4647e0777482865034ec50d1","permalink":"https://www.tidymass.org/docs/chapter11/","publishdate":"2023-09-29T00:00:00Z","relpermalink":"/docs/chapter11/","section":"docs","summary":"Chapter 11 Some function in tidymass","tags":null,"title":"11 Some function in tidymass","type":"book"},{"authors":null,"categories":null,"content":"Here, you can learn how to use tidyMass to do the data processing and analysis for the LC-MS metabolomics data. It contains several parts.\nIf you are new to R or the tidyverse We recommend that you start by learning some basics about R and the tidyverse first, then return here when you feel ready. Here are some resources to start learning:\nFinding Your Way To R, from the RStudio Education team.\nLearn the tidyverse, from the tidyverse team.\nPart 1. Install tidymass You can learn how to install tidymass, and update it. You can also find here how to download the docker version of tidymass and build your own docker image based on tidymass.\nüëâ Chapter 1 Part 2. massdatabase package and mass_dataset class You can find here how to download the demo data and create mass_dataset class by yourself. And how to use mass_dataset class organize your omics data and process it.\nüëâ Chapter 2 Part 3. Metabolite annotation All the metabolite annotation can be found here. You can also learn here how to construct the databases for metid using the massdatabase package.\nüëâ Chapter 7 Part 4. Whole workflow using tidymass Here, you can learn how to use tidymass for data processing and analysis, from data converting to biological function mining.\nThe code, data and docker image of case study in our manuscript are provided here.\nüëâ Chapter 10 ","date":1695945600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1695945600,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://www.tidymass.org/docs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/","section":"docs","summary":"Here, you can learn how to use tidyMass to do the data processing and analysis for the LC-MS metabolomics data. It contains several parts.\nIf you are new to R or the tidyverse We recommend that you start by learning some basics about R and the tidyverse first, then return here when you feel ready.","tags":null,"title":"Preface","type":"book"},{"authors":null,"categories":null,"content":"Here, you can learn how to create mass_dataset class object using tidymass.\nData preparation The massdataset class object can be used to store the untargeted metabolomics data.\nLet‚Äôs first prepare the data objects according to the attached figure for each file.\n1. sample_info (required) The columns sample_id (sample ID), injection.order (injection order of samples), class (Blank, QC, Subject, etc), group (case, control, etc) are required.\n2. variable_info (required) The columns variable_id (variable ID), mz (mass to charge ratio), rt (retention time, unit is second) are required.\n3. expression_data (required) Columns are samples are rows are features (variables).\nThe column names of expression_data should be completely same with sample_id in sample_info, and the row names of expression_data should be completely same with variable_id in variable_info.\n4. sample_info_note (optional) This is the metadata for sample_info.\n5. variable_info_note (optional) This is the metadata for variable_info.\nDownload demo data Here we use the demo data from masssprocesser package. The demo data can be downloaded here.\nDownload this data and uncompress it. And then set the path where you put the folder as working directory.\nThen prepare data.\nlibrary(tidyverse) #\u0026gt; ‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ #\u0026gt; ‚úî dplyr 1.1.2 ‚úî readr 2.1.4 #\u0026gt; ‚úî forcats 1.0.0 ‚úî stringr 1.5.0 #\u0026gt; ‚úî ggplot2 3.4.2 ‚úî tibble 3.2.1 #\u0026gt; ‚úî lubridate 1.9.2 ‚úî tidyr 1.3.0 #\u0026gt; ‚úî purrr 1.0.1 #\u0026gt; ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ #\u0026gt; ‚úñ dplyr::filter() masks stats::filter() #\u0026gt; ‚úñ dplyr::lag() masks stats::lag() #\u0026gt; ‚Ñπ Use the conflicted package (\u0026lt;http://conflicted.r-lib.org/\u0026gt;) to force all conflicts to become errors peak_table_pos = readr::read_csv(\u0026#34;feature_table/Peak_table_pos.csv\u0026#34;) #\u0026gt; Rows: 1612 Columns: 39 #\u0026gt; ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #\u0026gt; Delimiter: \u0026#34;,\u0026#34; #\u0026gt; chr (1): variable_id #\u0026gt; dbl (38): mz, rt, bl20210902_10, bl20210902_11, bl20210902_13, bl20210902_14... #\u0026gt; #\u0026gt; ‚Ñπ Use `spec()` to retrieve the full column specification for this data. #\u0026gt; ‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message. peak_table_neg = readr::read_csv(\u0026#34;feature_table/Peak_table_neg.csv\u0026#34;) #\u0026gt; Rows: 5486 Columns: 39 #\u0026gt; ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #\u0026gt; Delimiter: \u0026#34;,\u0026#34; #\u0026gt; chr (1): variable_id #\u0026gt; dbl (38): mz, rt, X20210902_neg04, X20210902_neg05, X20210902_neg06, X202109... #\u0026gt; #\u0026gt; ‚Ñπ Use `spec()` to retrieve the full column specification for this data. #\u0026gt; ‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message. sample_info_pos = readr::read_csv(\u0026#34;feature_table/sample_info_pos.csv\u0026#34;) #\u0026gt; Rows: 36 Columns: 4 #\u0026gt; ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #\u0026gt; Delimiter: \u0026#34;,\u0026#34; #\u0026gt; chr (3): sample_id, class, group #\u0026gt; dbl (1): injection.order #\u0026gt; #\u0026gt; ‚Ñπ Use `spec()` to retrieve the full column specification for this data. #\u0026gt; ‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message. sample_info_neg = readr::read_csv(\u0026#34;feature_table/sample_info_neg.csv\u0026#34;) #\u0026gt; Rows: 36 Columns: 4 #\u0026gt; ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #\u0026gt; Delimiter: \u0026#34;,\u0026#34; #\u0026gt; chr (3): sample_id, class, group #\u0026gt; dbl (1): injection.order #\u0026gt; #\u0026gt; ‚Ñπ Use `spec()` to retrieve the full column specification for this data. #\u0026gt; ‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message. Variable information and expression data are in the peak table. Let‚Äôs separate them.\nexpression_data_pos = peak_table_pos %\u0026gt;% dplyr::select(-c(variable_id:rt)) %\u0026gt;% as.data.frame() variable_info_pos = peak_table_pos %\u0026gt;% dplyr::select(variable_id:rt) %\u0026gt;% as.data.frame() rownames(expression_data_pos) = variable_info_pos$variable_id expression_data_neg = peak_table_neg %\u0026gt;% dplyr::select(-c(variable_id:rt)) %\u0026gt;% as.data.frame() variable_info_neg = peak_table_neg %\u0026gt;% dplyr::select(variable_id:rt) %\u0026gt;% as.data.frame() rownames(expression_data_neg) = variable_info_neg$variable_id colnames(expression_data_pos) == sample_info_pos$sample_id #\u0026gt; [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #\u0026gt; [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #\u0026gt; [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE colnames(expression_data_neg) == sample_info_neg$sample_id #\u0026gt; [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #\u0026gt; [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #\u0026gt; [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE The orders of sample_id in sample_info and column names of expression_data are different.\nexpression_data_pos = expression_data_pos[,sample_info_pos$sample_id] expression_data_neg = expression_data_neg[,sample_info_neg$sample_id] colnames(expression_data_pos) == ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"4b769bc5599f8946e390e0f3bb12e714","permalink":"https://www.tidymass.org/docs/chapter2/1-create_mass_dataset/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter2/1-create_mass_dataset/","section":"docs","summary":"Here, you can learn how to create mass_dataset class object using tidymass.\nData preparation The massdataset class object can be used to store the untargeted metabolomics data.\nLet‚Äôs first prepare the data objects according to the attached figure for each file.","tags":null,"title":"Create mass_dataset class","type":"book"},{"authors":null,"categories":null,"content":" Introduction The database class in metid is databaseClass. You can use the demo database in metid to explore it.\nlibrary(metid) #\u0026gt; metid 1.2.30 (2023-09-02 11:07:21.054003) #\u0026gt; #\u0026gt; Attaching package: \u0026#39;metid\u0026#39; #\u0026gt; The following object is masked from \u0026#39;package:stats\u0026#39;: #\u0026gt; #\u0026gt; filter data(\u0026#34;snyder_database_rplc0.0.3\u0026#34;) snyder_database_rplc0.0.3 #\u0026gt; -----------Base information------------ #\u0026gt; Version:0.0.2 #\u0026gt; Source:MS #\u0026gt; Link:http://snyderlab.stanford.edu/ #\u0026gt; Creater:Xiaotao Shen(shenxt1990@163.com) #\u0026gt; With RT information #\u0026gt; -----------Spectral information------------ #\u0026gt; 14 items of metabolite information: #\u0026gt; Lab.ID; Compound.name; mz; RT; CAS.ID; HMDB.ID; KEGG.ID; Formula; mz.pos; mz.neg (top10) #\u0026gt; 917 metabolites in total. #\u0026gt; 356 metabolites with spectra in positive mode. #\u0026gt; 534 metabolites with spectra in negative mode. #\u0026gt; Collision energy in positive mode (number:): #\u0026gt; Total number:2 #\u0026gt; NCE25; NCE50 #\u0026gt; Collision energy in negative mode: #\u0026gt; Total number:2 #\u0026gt; NCE25; NCE50 class(snyder_database_rplc0.0.3) #\u0026gt; [1] \u0026#34;databaseClass\u0026#34; #\u0026gt; attr(,\u0026#34;package\u0026#34;) #\u0026gt; [1] \u0026#34;metid\u0026#34; It contains three parts:\nspectra.info: The information for all the metabolites/compounds in the database. Lab.ID Compound.name mz RT CAS.ID HMDB.ID KEGG.ID Formula mz.pos mz.neg Submitter Family Sub.pathway Note RPLC_1 Pyrrole-3-carboxylic acid 111.032 42.00000 NA NA NA C5H5NO2 112.0393 110.02470 Mix_A Organic acids and derivatives NA NA RPLC_2 3-Furoic acid 112.016 60.00000 NA NA NA C5H4O3 113.0233 111.00880 Mix_A Organic acids and derivatives NA NA RPLC_3 3,4-Dehydro-DL-proline 113.0477 30.00000 NA NA NA C5H7NO2 114.0550 112.04040 Mix_A Amino acids and conjugates NA NA RPLC_4 1-Methylhydantoin 114.0429 30.00000 NA NA NA C4H6N2O2 115.0502 113.03560 Mix_A Miscellaneous NA NA RPLC_5 5-Methylcytosine hydrochloride 125.0589 30.00000 NA NA NA C5H7N3O 126.0662 124.05160 Mix_A Nucleosides and conjugates NA NA RPLC_6 5-Aminoimidazole-4-carboxamide hydrochloride 126.0542 30.00000 NA NA NA C4H6N4O 127.0614 125.04690 Mix_A Imidazoles and derivatives NA NA RPLC_7 2-Pyrrolidinone-5-carboxylic acid 129.0426 33.00000 NA NA NA C5H7NO3 130.0499 128.03530 Mix_A Organic acids and derivatives NA NA RPLC_8 Nicotinamide-N-Oxide 138.0429 33.00000 NA NA NA C6H6N2O2 139.0502 137.03560 Mix_A Pyridines and derivatives NA NA RPLC_9 2-(4-Hydroxyphenyl)ethanol (Tyrosol) 138.0681 95.40000 NA NA NA C8H10O2 139.0754 137.06080 Mix_A Alcohols and polyols NA NA RPLC_10 5-(Hydroxymethyl)uracil 142.0378 73.20000 NA NA NA C5H6N2O3 143.0451 141.03060 Mix_A Nucleosides and conjugates NA NA RPLC_11 7-Methyladenine 149.0701 48.00000 NA NA NA C6H7N5 150.0774 148.06290 Mix_A Nucleosides and conjugates NA NA RPLC_12 1-Methylhypoxanthine 150.0542 73.20000 NA NA NA C6H6N4O 151.0614 149.04690 Mix_A Nucleosides and conjugates NA NA RPLC_13 4,6-Diamino-5-(formylamino)pyrimidine (FAPy-Adenine) 153.0651 33.00000 NA NA NA C5H7N5O 154.0723 152.05780 Mix_A Nucleosides and conjugates NA NA RPLC_14 4-Deoxypyridoxine 153.079 33.00000 NA NA NA C8H11NO2 154.0863 152.07170 Mix_A Pyridines and derivatives NA NA RPLC_15 2,3-Dihydroxybenzoic acid 154.0266 78.60000 NA NA NA C7H6O4 155.0339 153.01930 Mix_A Organic acids and derivatives NA NA RPLC_16 5-Hydroxymethyl-6-methyluracil 156.0535 33.00000 NA NA NA C6H8N2O3 157.0608 155.04620 Mix_A Nucleosides and conjugates NA NA RPLC_17 1-Methylguanine 165.0651 58.20000 NA NA NA C6H7N5O 166.0723 164.05780 Mix_A Nucleosides and conjugates NA NA RPLC_18 7-Methylxanthine 166.0491 574.80000 NA NA NA C6H6N4O2 167.0564 165.04180 Mix_A Nucleosides and conjugates NA NA RPLC_19 3-(2,5-dioxoimidazolidin-4-yl)propanoic acid (Hydantoin-5-propionic acid) 172.0484 33.00000 NA NA NA C6H8N2O4 173.0557 171.04110 Mix_A Organic acids and derivatives NA NA RPLC_20 3-Indoleacetic acid 175.0633 217.20000 NA NA NA C10H9NO2 176.0706 174.05600 Mix_A Organic acids and derivatives NA NA RPLC_21 (-)-Cotinine 176.095 170.40000 NA NA NA C10H12N2O 177.1022 175.08770 Mix_A Miscellaneous NA NA RPLC_22 (+/-)-Salsolinol Hydrochloride 179.0946 33.00000 NA NA NA C10H13NO2 180.1019 178.08730 Mix_A Alcohols and polyols NA NA RPLC_23 4-Pyridoxic acid 183.0532 54.60000 NA NA NA C8H9NO4 184.0604 182.04590 Mix_A Organic acids and derivatives NA NA RPLC_24 3-Indoleacrylic acid 187.0633 321.60000 NA NA NA C11H9NO2 188.0706 186.05600 Mix_A Organic acids and derivatives NA NA RPLC_25 5-Hydroxyindole-3-acetic acid 191.0582 111.60000 NA NA NA C10H9NO3 192.0655 190.05100 Mix_A Organic acids and derivatives NA NA RPLC_26 3-Indolebutyric acid 203.0946 336.60000 NA NA NA C12H13NO2 204.1019 202.08730 Mix_A Organic acids and derivatives NA NA RPLC_27 5-Acetylamino-6-amino-3-methyluracil Hydrate 216.0859 170.40000 NA NA NA C7H12N4O4 217.0931 215.07860 Mix_A Nucleosides and conjugates NA NA RPLC_28 2\u0026#39;-Deoxycytidine 227.0906 33.00000 NA NA NA C9H13N3O4 228.0979 226.08330 Mix_A Nucleosides and conjugates NA NA RPLC_29 2\u0026#39;-Deoxyuridine 228.0746 43.20000 NA NA NA C9H12N2O5 229.0819 227.06730 Mix_A Nucleosides and conjugates NA NA RPLC_30 ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"e3e10b11c9d5c185801012cac2fb635d","permalink":"https://www.tidymass.org/docs/chapter7/1-metid_database_structure/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter7/1-metid_database_structure/","section":"docs","summary":"Introduction The database class in metid is databaseClass. You can use the demo database in metid to explore it.\nlibrary(metid) #\u003e metid 1.2.30 (2023-09-02 11:07:21.054003) #\u003e #\u003e Attaching package: 'metid' #\u003e The following object is masked from 'package:stats': #\u003e #\u003e filter data(\"snyder_database_rplc0.","tags":null,"title":"Databases for metID","type":"book"},{"authors":null,"categories":null,"content":"If you don‚Äôt have R or RStudio on you PC or Mac, please install them first. Otherwise, skip these steps.\nüëâ Update R Install R Download the R and install it.\nüëâ Refer this blog\nInstall RStudio Then install RStudio. Download the RStudio and then install it.\nSelect the free version of RStudio Desktop.\nüëâ Refer this blog\nOpen the RStudio Then open the RStudio\nUpdate R tidymass require R version \u0026gt; 4.1. Please update your R if the version \u0026lt; 4.1.\nYou can check your R version in your console:\nversion ## _ ## platform x86_64-apple-darwin20 ## arch x86_64 ## os darwin20 ## system x86_64, darwin20 ## status ## major 4 ## minor 3.0 ## year 2023 ## month 04 ## day 21 ## svn rev 84292 ## language R ## version.string R version 4.3.0 (2023-04-21) ## nickname Already Tomorrow If your R version is \u0026lt; 4.1, please download and install the latest version of R, and then restart your R.\nInstall tidymass from tidymass.org Copy and paste the below code in your console.\nsource(\u0026#34;https://www.tidymass.org/tidymass-packages/install_tidymass.txt\u0026#34;) install_tidymass(from = \u0026#34;tidymass.org\u0026#34;) You can also use this method to install one specific package. For example, if you only want to install metID.\ninstall_tidymass(from = \u0026#34;tidymass.org\u0026#34;, which_package = \u0026#34;metid\u0026#34;) Demo video is bellow:\nIf above code doesn‚Äôt work, try to change the method argument.\n‚Äúauto‚Äù\n‚Äúinternal‚Äù\n‚Äúlibcurl‚Äù\n‚Äúwget‚Äù\n‚Äúcurl‚Äù\nInstall tidymass from GitHub Copy and paste the below code in your console.\nif(!require(remotes)){ install.packages(\u0026#34;remotes\u0026#34;) } remotes::install_github(\u0026#34;tidymass/tidymass\u0026#34;, dependencies = TRUE) Some issues During the installation, it will ask if you want to update some packages for few times, just enter Enter or Return key to skip it.\nIf there is a error like below:\nError: Failed to install ‚Äôtidymass‚Äô from GitHub: HTTP error 403. API rate limit exceeded for 171.66.10.237. (But here‚Äôs the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\nTry to resolve it by:\nIn you R console, type this code: if(!require(usethis)){ install.packages(\u0026#34;usethis\u0026#34;) } usethis::create_github_token() It will open a page in browser, and create a ‚ÄúNew personal access token‚Äù and copy it.\nThen type this code: usethis::edit_r_environ() and then add one line like below:\nGITHUB_PAT=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 The GITHUB_PAT should be yours that is created in step 1.\nAnd then restart R session and try again.\nInstall tidymass from GitLab Copy and paste the below code in your console.\nif(!require(remotes)){ install.packages(\u0026#34;remotes\u0026#34;) } remotes::install_gitlab(\u0026#34;tidymass/tidymass\u0026#34;, dependencies = TRUE) Install tidymass from Gitee If you are in China, you can try to install tidymass from Gitee. Copy and paste the below code in your console.\nif(!require(remotes)){ install.packages(\u0026#34;remotes\u0026#34;) } remotes::install_git(url = \u0026#34;https://gitee.com/tidymass/tidymass\u0026#34;, dependencies = TRUE) If you can‚Äôt install tidymass successfully, please contact us by\nüì• Contact us or leave me a comment below.\nSession information sessionInfo() ## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin20 (64-bit) ## Running under: macOS Ventura 13.5.1 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## time zone: America/Los_Angeles ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] digest_0.6.31 R6_2.5.1 bookdown_0.34 fastmap_1.1.1 ## [5] xfun_0.39 blogdown_1.18.1 cachem_1.0.8 knitr_1.43 ## [9] htmltools_0.5.5 rmarkdown_2.22 cli_3.6.1 sass_0.4.6 ## [13] jquerylib_0.1.4 compiler_4.3.0 rstudioapi_0.14 tools_4.3.0 ## [17] evaluate_0.21 bslib_0.5.0 yaml_2.3.7 jsonlite_1.8.5 ## [21] rlang_1.1.1 ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"a0027db034f4f2961cf34520dd795fc4","permalink":"https://www.tidymass.org/docs/chapter1/1-installation/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter1/1-installation/","section":"docs","summary":"If you don‚Äôt have R or RStudio on you PC or Mac, please install them first. Otherwise, skip these steps.\nüëâ Update R Install R Download the R and install it.","tags":null,"title":"Install tidymass","type":"book"},{"authors":null,"categories":null,"content":"getwd() #\u0026gt; [1] \u0026#34;/Users/xiaotaoshen/tidymass/tidymass-website/content/docs/chapter3\u0026#34; Install Proteowizard Proteowizard only supports Windows OS. So if you don‚Äôt use Windows OS, consider massconverter.\nDownload Proteowizard and install it.\nData preparation Please place the raw data in one folder according to MS1 and MS2. Then you can convert them using Proteowizard package.\nConvert MS1 data to mzXML format data Just convert data into mzXML format data according to the parameters below:\nConvert MS2 data to mzXML or mgf format data Just convert data into mzXML or mgf format data according to the parameters below:\nSession information sessionInfo() #\u0026gt; R version 4.3.0 (2023-04-21) #\u0026gt; Platform: x86_64-apple-darwin20 (64-bit) #\u0026gt; Running under: macOS Ventura 13.5.1 #\u0026gt; #\u0026gt; Matrix products: default #\u0026gt; BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib #\u0026gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 #\u0026gt; #\u0026gt; locale: #\u0026gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #\u0026gt; #\u0026gt; time zone: America/Los_Angeles #\u0026gt; tzcode source: internal #\u0026gt; #\u0026gt; attached base packages: #\u0026gt; [1] stats graphics grDevices utils datasets methods base #\u0026gt; #\u0026gt; loaded via a namespace (and not attached): #\u0026gt; [1] digest_0.6.31 R6_2.5.1 codetools_0.2-19 bookdown_0.34 #\u0026gt; [5] fastmap_1.1.1 xfun_0.39 blogdown_1.18.1 cachem_1.0.8 #\u0026gt; [9] knitr_1.43 htmltools_0.5.5 rmarkdown_2.22 cli_3.6.1 #\u0026gt; [13] sass_0.4.6 jquerylib_0.1.4 compiler_4.3.0 rprojroot_2.0.3 #\u0026gt; [17] here_1.0.1 rstudioapi_0.14 tools_4.3.0 evaluate_0.21 #\u0026gt; [21] bslib_0.5.0 yaml_2.3.7 jsonlite_1.8.5 rlang_1.1.1 ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"0562319301706b6ddfba2f69be19cf03","permalink":"https://www.tidymass.org/docs/chapter3/1-proteowizard/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter3/1-proteowizard/","section":"docs","summary":"getwd() #\u003e [1] \"/Users/xiaotaoshen/tidymass/tidymass-website/content/docs/chapter3\" Install Proteowizard Proteowizard only supports Windows OS. So if you don‚Äôt use Windows OS, consider massconverter.\nDownload Proteowizard and install it.\nData preparation Please place the raw data in one folder according to MS1 and MS2.","tags":null,"title":"Convert data using proteowizard","type":"book"},{"authors":null,"categories":null,"content":"Data preparation We just use the dataset which are from this step.\nlibrary(tidymass) #\u0026gt; Registered S3 method overwritten by \u0026#39;Hmisc\u0026#39;: #\u0026gt; method from #\u0026gt; vcov.default fit.models #\u0026gt; ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.0.8 ‚îÄ‚îÄ #\u0026gt; ‚úî massdataset 1.0.25 ‚úî metid 1.2.28 #\u0026gt; ‚úî massprocesser 1.0.10 ‚úî masstools 1.0.10 #\u0026gt; ‚úî masscleaner 1.0.11 ‚úî dplyr 1.1.2 #\u0026gt; ‚úî massqc 1.0.6 ‚úî ggplot2 3.4.2 #\u0026gt; ‚úî massstat 1.0.5 ‚úî magrittr 2.0.3 #\u0026gt; ‚úî metpath 1.0.8 load(\u0026#34;data_cleaning/POS/object_pos\u0026#34;) load(\u0026#34;data_cleaning/NEG/object_neg\u0026#34;) Change batch to character.\nobject_pos \u0026lt;- object_pos %\u0026gt;% activate_mass_dataset(what = \u0026#34;sample_info\u0026#34;) %\u0026gt;% dplyr::mutate(batch = as.character(batch)) object_neg \u0026lt;- object_neg %\u0026gt;% activate_mass_dataset(what = \u0026#34;sample_info\u0026#34;) %\u0026gt;% dplyr::mutate(batch = as.character(batch)) object_pos #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.8 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 10149 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 6 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 10149 x 3 data.frame] #\u0026gt; 10149 variables:M70T73_POS M70T53_POS M70T183_POS ... M923T55_POS M992T641_POS #\u0026gt; 4.sample_info_note:[ 6 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 0 variables x 0 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 3 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2022-02-22 16:37:06 #\u0026gt; process_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massprocesser process_data 2022-02-22 16:36:42 #\u0026gt; mutate ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate() 2023-08-30 23:09:11 object_neg #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.8 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 8804 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 6 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 8804 x 3 data.frame] #\u0026gt; 8804 variables:M70T712_NEG M70T527_NEG M70T587_NEG ... M941T65_NEG M948T641_NEG #\u0026gt; 4.sample_info_note:[ 6 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 0 variables x 0 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 3 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2022-02-22 16:38:19 #\u0026gt; process_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massprocesser process_data 2022-02-22 16:38:02 #\u0026gt; mutate ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate() 2023-08-30 23:09:11 Data quality assessment before data cleaning Here, we can use the massqc package to assess the data quality.\nWe can just use the massqc_report() function to get a html format quality assessment report.\nmassqc::massqc_report(object = object_pos, path = \u0026#34;data_cleaning/POS/data_quality_before_data_cleaning\u0026#34;) A html format report and pdf figures will be placed in the folder data_cleaning/POS/data_quality_before_data_cleaning/Report.\nThe html report is below:\nNegative mode.\nmassqc::massqc_report(object = object_neg, path = \u0026#34;data_cleaning/NEG/data_quality_before_data_cleaning\u0026#34;) The PCA score plot is used to show the batch effect of positive and negative dataset.\nPositive mode:\nNegative mode:\nWe can see that no matter in positive and negative mode, batch effect is serious.\nRemove noisy metabolic features Remove variables which have MVs in more than 20% QC samples and in at lest 50% samples in control group or case group.\nPositive mode object_pos %\u0026gt;% activate_mass_dataset(what = \u0026#34;sample_info\u0026#34;) %\u0026gt;% dplyr::count(group) #\u0026gt; group n #\u0026gt; 1 Case 110 #\u0026gt; 2 Control 110 #\u0026gt; 3 QC 39 MV percentage in QC samples.\nshow_variable_missing_values(object = object_pos %\u0026gt;% activate_mass_dataset(what = \u0026#34;sample_info\u0026#34;) %\u0026gt;% filter(class == \u0026#34;QC\u0026#34;), percentage = TRUE) + scale_size_continuous(range = c(0.01, 2)) qc_id = object_pos %\u0026gt;% activate_mass_dataset(what = \u0026#34;sample_info\u0026#34;) %\u0026gt;% filter(class == \u0026#34;QC\u0026#34;) %\u0026gt;% pull(sample_id) control_id = object_pos %\u0026gt;% activate_mass_dataset(what = \u0026#34;sample_info\u0026#34;) %\u0026gt;% filter(group == \u0026#34;Control\u0026#34;) %\u0026gt;% pull(sample_id) case_id = object_pos %\u0026gt;% activate_mass_dataset(what = \u0026#34;sample_info\u0026#34;) %\u0026gt;% filter(group == \u0026#34;Case\u0026#34;) %\u0026gt;% pull(sample_id) object_pos = object_pos %\u0026gt;% mutate_variable_na_freq(according_to_samples = qc_id) %\u0026gt;% mutate_variable_na_freq(according_to_samples = control_id) %\u0026gt;% mutate_variable_na_freq(according_to_samples = case_id) head(extract_variable_info(object_pos)) #\u0026gt; variable_id mz rt na_freq na_freq.1 na_freq.2 #\u0026gt; 1 M70T73_POS 70.04074 73.31705 0.28205128 0.6000000 0.4727273 #\u0026gt; 2 M70T53_POS 70.06596 52.78542 0.00000000 0.1454545 0.0000000 #\u0026gt; 3 M70T183_POS 70.19977 182.87981 0.00000000 0.6636364 0.7454545 #\u0026gt; 4 M70T527_POS 70.36113 526.76657 0.02564103 0.1818182 0.3000000 #\u0026gt; 5 M71T695_POS 70.56911 694.84592 0.02564103 0.6454545 0.5545455 #\u0026gt; 6 M71T183_POS 70.75034 182.77790 0.05128205 0.7272727 0.7909091 Remove variables.\nobject_pos \u0026lt;- ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"cdd1ece0251fb9fdd691d7c2fb30bc38","permalink":"https://www.tidymass.org/docs/chapter6/1-data_cleaning/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter6/1-data_cleaning/","section":"docs","summary":"Data preparation We just use the dataset which are from this step.\nlibrary(tidymass) #\u003e Registered S3 method overwritten by 'Hmisc': #\u003e method from #\u003e vcov.default fit.models #\u003e ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.","tags":null,"title":"Data cleaning","type":"book"},{"authors":null,"categories":null,"content":"Data preparation Download the demo data and refer this article.\nWe have positive and negative mode. For each mode, we have control, case and QC groups. Control group have 110 samples, and case group have 110 samples as well.\nPositive mode massprocesser package is used to do the raw data processing. Please refer this website.\nCode The code used to do raw data processing.\nlibrary(tidymass) process_data( path = \u0026#34;mzxml_ms1_data/POS\u0026#34;, polarity = \u0026#34;positive\u0026#34;, ppm = 10, peakwidth = c(10, 60), threads = 4, output_tic = FALSE, output_bpc = FALSE, output_rt_correction_plot = FALSE, min_fraction = 0.5, group_for_figure = \u0026#34;QC\u0026#34; ) Results All the results will be placed in the folder mzxml_ms1_data/POS/Result. More information can be found here.\nYou can just load the object, which is a mass_dataset class object.\nload(\u0026#34;mzxml_ms1_data/POS/Result/object\u0026#34;) object #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.8 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 10149 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 4 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 10149 x 3 data.frame] #\u0026gt; 10149 variables:M70T73_POS M70T53_POS M70T183_POS ... M923T55_POS M992T641_POS #\u0026gt; 4.sample_info_note:[ 4 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 0 variables x 0 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 2 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2022-02-22 16:37:06 #\u0026gt; process_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massprocesser process_data 2022-02-22 16:36:42 We can see that there are 10,149 metabolic features in positive mode.\nYou can use the plot_adjusted_rt() function to get the interactive plot.\nload(\u0026#34;mzxml_ms1_data/POS/Result/intermediate_data/xdata2\u0026#34;) ##set the group_for_figure if you want to show specific groups. And set it as \u0026#34;all\u0026#34; if you want to show all samples. plot = massprocesser::plot_adjusted_rt(object = xdata2, group_for_figure = \u0026#34;QC\u0026#34;, interactive = TRUE) plot Negative mode The processing of negative mode is same with positive mode data.\nCode Same with positive mode, change polarity to negative.\nmassprocesser::process_data( path = \u0026#34;mzxml_ms1_data/NEG\u0026#34;, polarity = \u0026#34;negative\u0026#34;, ppm = 10, peakwidth = c(10, 60), threads = 4, output_tic = FALSE, output_bpc = FALSE, output_rt_correction_plot = FALSE, min_fraction = 0.5, group_for_figure = \u0026#34;QC\u0026#34; ) Results Same with positive mode.\nload(\u0026#34;mzxml_ms1_data/NEG/Result/object\u0026#34;) object #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.8 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 8804 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 4 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 8804 x 3 data.frame] #\u0026gt; 8804 variables:M70T712_NEG M70T527_NEG M70T587_NEG ... M941T65_NEG M948T641_NEG #\u0026gt; 4.sample_info_note:[ 4 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 0 variables x 0 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 2 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2022-02-22 16:38:19 #\u0026gt; process_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massprocesser process_data 2022-02-22 16:38:02 We can see that there are 8,804 metabolic features in negative mode.\nSession information sessionInfo() #\u0026gt; R version 4.3.0 (2023-04-21) #\u0026gt; Platform: x86_64-apple-darwin20 (64-bit) #\u0026gt; Running under: macOS Ventura 13.5.1 #\u0026gt; #\u0026gt; Matrix products: default #\u0026gt; BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib #\u0026gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 #\u0026gt; #\u0026gt; locale: #\u0026gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #\u0026gt; #\u0026gt; time zone: America/Los_Angeles #\u0026gt; tzcode source: internal #\u0026gt; #\u0026gt; attached base packages: #\u0026gt; [1] grid stats4 stats graphics grDevices utils datasets #\u0026gt; [8] methods base #\u0026gt; #\u0026gt; other attached packages: #\u0026gt; [1] metid_1.2.28 metpath_1.0.8 ComplexHeatmap_2.16.0 #\u0026gt; [4] mixOmics_6.24.0 lattice_0.21-8 MASS_7.3-58.4 #\u0026gt; [7] massstat_1.0.5 tidyr_1.3.0 ggfortify_0.4.16 #\u0026gt; [10] massqc_1.0.6 masscleaner_1.0.11 xcms_3.22.0 #\u0026gt; [13] MSnbase_2.26.0 ProtGenerics_1.32.0 S4Vectors_0.38.1 #\u0026gt; [16] mzR_2.34.0 Rcpp_1.0.10 Biobase_2.60.0 #\u0026gt; [19] BiocGenerics_0.46.0 BiocParallel_1.34.2 massprocesser_1.0.10 #\u0026gt; [22] ggplot2_3.4.2 dplyr_1.1.2 magrittr_2.0.3 #\u0026gt; [25] masstools_1.0.10 massdataset_1.0.25 tidymass_1.0.8 #\u0026gt; #\u0026gt; loaded via a namespace (and not attached): #\u0026gt; [1] splines_4.3.0 bitops_1.0-7 #\u0026gt; [3] cellranger_1.1.0 tibble_3.2.1 #\u0026gt; [5] polyclip_1.10-4 preprocessCore_1.62.1 #\u0026gt; [7] XML_3.99-0.14 rpart_4.1.19 #\u0026gt; [9] fastDummies_1.6.3 lifecycle_1.0.3 #\u0026gt; [11] doParallel_1.0.17 rprojroot_2.0.3 #\u0026gt; [13] globals_0.16.2 backports_1.4.1 #\u0026gt; [15] plotly_4.10.2 openxlsx_4.2.5.2 #\u0026gt; [17] limma_3.56.2 Hmisc_5.1-0 #\u0026gt; [19] ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"d396ef5e42f9a4fa91294d10a31989a2","permalink":"https://www.tidymass.org/docs/chapter5/1-data_explore/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter5/1-data_explore/","section":"docs","summary":"Data preparation Download the demo data and refer this article.\nWe have positive and negative mode. For each mode, we have control, case and QC groups. Control group have 110 samples, and case group have 110 samples as well.","tags":null,"title":"Explore data","type":"book"},{"authors":null,"categories":null,"content":"Introduction In the realm of computational chemistry and bioinformatics, handling and analyzing chemical formulae is a frequent task. While R provides extensive capabilities for data manipulation and analysis, specific tools tailored to chemical formulae can simplify the process. In this post, we introduce three new functions: is_valid_chemical_formula, parse_chemical_formula, and get_mass. Let‚Äôs dive into their usage and benefits.\nPlease update your masstools package before use these functions.\nChecking the Validity of a Chemical Formula The is_valid_chemical_formula function allows users to quickly verify if a given formula is valid based on known chemical elements.\nlibrary(masstools) #\u0026gt; masstools 1.0.11 (2023-09-29 11:09:36.494214) # Function definition here... # Copy and paste the \u0026#39;is_valid_chemical_formula\u0026#39; function here is_valid_chemical_formula(\u0026#34;H2O\u0026#34;) # TRUE #\u0026gt; [1] TRUE is_valid_chemical_formula(\u0026#34;H2ZO4\u0026#34;) # FALSE #\u0026gt; [1] FALSE This function returns TRUE if all elements in the formula are recognized and FALSE otherwise.\nParsing Chemical Formulae With the parse_chemical_formula function, you can break down a chemical formula into its individual elements and their respective counts.\n# Function definition here... # Copy and paste the \u0026#39;parse_chemical_formula\u0026#39; function here parse_chemical_formula(\u0026#34;H2O\u0026#34;) # Returns H:2 and O:1 #\u0026gt; Element Count #\u0026gt; 1 H 2 #\u0026gt; 2 O 1 parse_chemical_formula(\u0026#34;C6H12O6\u0026#34;) # Returns C:6, H:12, and O:6 #\u0026gt; Element Count #\u0026gt; 1 C 6 #\u0026gt; 2 H 12 #\u0026gt; 3 O 6 The result is presented in a user-friendly data frame format.\nCalculating Mass of Chemical Formulae The get_mass function computes the mass of a given formula based on either its exact mass or its average mass.\n# Function definition here... # Copy and paste the \u0026#39;get_mass\u0026#39; function here get_mass(\u0026#34;H2O\u0026#34;, which = \u0026#34;exact_mass\u0026#34;) #\u0026gt; H2O #\u0026gt; 18.01056 get_mass(\u0026#34;C6H12O6\u0026#34;, which = \u0026#34;average_mass\u0026#34;) #\u0026gt; C6H12O6 #\u0026gt; 180.156 You can specify the type of mass calculation by setting the which parameter to either ‚Äúexact_mass‚Äù or ‚Äúaverage_mass‚Äù.\nConclusion These new functions simplify common tasks related to chemical formulae in R. Whether you‚Äôre verifying the validity of a formula, parsing it, or computing its mass, these tools make the process efficient and user-friendly. We hope they‚Äôll be a valuable addition to your R toolkit, especially if you work frequently with chemical data!\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6170435c971afc05ccc7a7ccb38fe042","permalink":"https://www.tidymass.org/docs/chapter11/1-formula/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter11/1-formula/","section":"docs","summary":"Introduction In the realm of computational chemistry and bioinformatics, handling and analyzing chemical formulae is a frequent task. While R provides extensive capabilities for data manipulation and analysis, specific tools tailored to chemical formulae can simplify the process.","tags":null,"title":"Formula function","type":"book"},{"authors":null,"categories":null,"content":"Data preparation Load the differential expressional metabolites.\nlibrary(tidymass) #\u0026gt; Registered S3 method overwritten by \u0026#39;Hmisc\u0026#39;: #\u0026gt; method from #\u0026gt; vcov.default fit.models #\u0026gt; ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.0.8 ‚îÄ‚îÄ #\u0026gt; ‚úî massdataset 1.0.25 ‚úî metid 1.2.28 #\u0026gt; ‚úî massprocesser 1.0.10 ‚úî masstools 1.0.10 #\u0026gt; ‚úî masscleaner 1.0.11 ‚úî dplyr 1.1.2 #\u0026gt; ‚úî massqc 1.0.6 ‚úî ggplot2 3.4.2 #\u0026gt; ‚úî massstat 1.0.5 ‚úî magrittr 2.0.3 #\u0026gt; ‚úî metpath 1.0.8 library(tidyverse) #\u0026gt; ‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ #\u0026gt; ‚úî forcats 1.0.0 ‚úî readr 2.1.4 #\u0026gt; ‚úî lubridate 1.9.2 ‚úî stringr 1.5.0 #\u0026gt; ‚úî purrr 1.0.1 ‚úî tibble 3.2.1 #\u0026gt; ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ #\u0026gt; ‚úñ xcms::collect() masks dplyr::collect() #\u0026gt; ‚úñ MSnbase::combine() masks Biobase::combine(), BiocGenerics::combine(), dplyr::combine() #\u0026gt; ‚úñ tidyr::expand() masks S4Vectors::expand() #\u0026gt; ‚úñ tidyr::extract() masks magrittr::extract() #\u0026gt; ‚úñ metid::filter() masks metpath::filter(), dplyr::filter(), massdataset::filter(), stats::filter() #\u0026gt; ‚úñ S4Vectors::first() masks dplyr::first() #\u0026gt; ‚úñ xcms::groups() masks dplyr::groups() #\u0026gt; ‚úñ dplyr::lag() masks stats::lag() #\u0026gt; ‚úñ purrr::map() masks mixOmics::map() #\u0026gt; ‚úñ BiocGenerics::Position() masks ggplot2::Position(), base::Position() #\u0026gt; ‚úñ purrr::reduce() masks MSnbase::reduce() #\u0026gt; ‚úñ S4Vectors::rename() masks dplyr::rename(), massdataset::rename() #\u0026gt; ‚úñ lubridate::second() masks S4Vectors::second() #\u0026gt; ‚úñ lubridate::second\u0026lt;-() masks S4Vectors::second\u0026lt;-() #\u0026gt; ‚úñ MASS::select() masks dplyr::select(), massdataset::select() #\u0026gt; ‚úñ purrr::set_names() masks magrittr::set_names() #\u0026gt; ‚Ñπ Use the conflicted package (\u0026lt;http://conflicted.r-lib.org/\u0026gt;) to force all conflicts to become errors load(\u0026#34;statistical_analysis/object_final\u0026#34;) object_final #\u0026gt; -------------------- #\u0026gt; massdataset version: 1.0.25 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 291 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 11 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 291 x 12 data.frame] #\u0026gt; 291 variables:M86T95_POS M95T100_1_POS M100T160_POS ... M480T641_NEG M514T611_NEG #\u0026gt; 4.sample_info_note:[ 11 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 12 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 2084 variables x 1902 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 26 processings in total #\u0026gt; Latest 3 processings show #\u0026gt; slice_head ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset slice_head() 2023-08-31 00:00:36.358056 #\u0026gt; 2 massdataset slice_head() 2023-08-31 00:00:36.85759 #\u0026gt; mutate_fc ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate_fc() 2023-08-31 00:00:37 #\u0026gt; mutate_p_value ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate_p_value() 2023-08-31 00:00:37 Pathway enrichment All the results will be placed in a folder named as pathway_enrichment.\ndir.create(path = \u0026#34;pathway_enrichment\u0026#34;, showWarnings = FALSE) diff_metabolites \u0026lt;- object_final %\u0026gt;% activate_mass_dataset(what = \u0026#34;variable_info\u0026#34;) %\u0026gt;% filter(p_value_adjust \u0026lt; 0.05) %\u0026gt;% extract_variable_info() head(diff_metabolites) #\u0026gt; variable_id mz rt na_freq na_freq.1 na_freq.2 na_freq_2 #\u0026gt; 1 M86T95_POS 86.09716 94.57264 0.02564103 0.55454545 0.29090909 NA #\u0026gt; 2 M95T100_1_POS 95.04975 99.77637 0.00000000 0.00000000 0.00000000 NA #\u0026gt; 3 M103T100_POS 103.05477 99.90601 0.00000000 0.00000000 0.00000000 NA #\u0026gt; 4 M104T51_POS 104.10746 51.27993 0.00000000 0.07272727 0.00000000 NA #\u0026gt; 5 M113T81_POS 113.03501 80.73506 0.00000000 0.00000000 0.00000000 NA #\u0026gt; 6 M113T187_POS 113.06018 186.56470 0.02564103 0.01818182 0.02727273 NA #\u0026gt; na_freq.1_2 na_freq.2_2 fc p_value p_value_adjust #\u0026gt; 1 NA NA 1.714629 3.034938e-20 4.702229e-19 #\u0026gt; 2 NA NA 1.439791 6.761432e-31 3.935153e-29 #\u0026gt; 3 NA NA 1.345809 5.215317e-19 6.898442e-18 #\u0026gt; 4 NA NA 1.751085 2.695171e-08 1.188325e-07 #\u0026gt; 5 NA NA 1.500756 5.966911e-22 1.335670e-20 #\u0026gt; 6 NA NA 1.951417 1.848299e-17 1.854673e-16 #\u0026gt; Compound.name CAS.ID HMDB.ID KEGG.ID Lab.ID Adduct #\u0026gt; 1 Piperidine 110-89-4 \u0026lt;NA\u0026gt; C01746 MONA_2852 (M+H)+ #\u0026gt; 2 Phenol 108-95-2 \u0026lt;NA\u0026gt; D01960 MONA_18506 (M+H)+ #\u0026gt; 3 Phenylacetaldehyde 122-78-1 HMDB06236 C00601 NO07389 (M+H-H2O)+ #\u0026gt; 4 5-Amino-1-pentanol 2508-29-4 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; NO07238 (M+H)+ #\u0026gt; 5 URACIL \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; MONA_18148 (M+H)+ #\u0026gt; 6 1,4-Cyclohexanedione \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; MONA_14519 (M+H)+ #\u0026gt; mz.error mz.match.score RT.error RT.match.score CE SS #\u0026gt; 1 1.746869 0.9932417 NA NA 30 0.6143541 #\u0026gt; 2 1.416428 0.9955515 NA NA 10 0.6102452 #\u0026gt; 3 1.537004 0.9947640 NA NA 10 0.5748835 #\u0026gt; 4 1.169128 0.9969671 NA NA 5 0.5971697 #\u0026gt; 5 1.275544 0.9963909 NA NA 10 0.6889885 #\u0026gt; 6 1.051626 0.9975454 NA NA HCD (NCE 20-30-40%) 0.5401414 #\u0026gt; Total.score Database Level #\u0026gt; 1 0.7564369 MoNA_0.0.1 2 #\u0026gt; 2 0.7547351 MoNA_0.0.1 2 #\u0026gt; 3 0.7323387 NIST_0.0.1 2 #\u0026gt; 4 0.7470937 NIST_0.0.1 2 #\u0026gt; 5 0.8042644 MoNA_0.0.1 2 #\u0026gt; 6 0.7116679 MoNA_0.0.1 2 Load KEGG human pathway database data(\u0026#34;kegg_hsa_pathway\u0026#34;, package = \u0026#34;metpath\u0026#34;) kegg_hsa_pathway #\u0026gt; ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"7ba05ea57f0890372e082c19550a1a04","permalink":"https://www.tidymass.org/docs/chapter9/1-pahtway_enrichment/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter9/1-pahtway_enrichment/","section":"docs","summary":"Data preparation Load the differential expressional metabolites.\nlibrary(tidymass) #\u003e Registered S3 method overwritten by 'Hmisc': #\u003e method from #\u003e vcov.default fit.models #\u003e ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.0.8 ‚îÄ‚îÄ #\u003e ‚úî massdataset 1.","tags":null,"title":"Pathway enrichment","type":"book"},{"authors":null,"categories":null,"content":"Data preparation Download the demo data and refer this article.\nWe have positive and negative mode. For each mode, we have control, case and QC groups. Control group have 110 samples, and case group have 110 samples as well.\nPositive mode massprocesser package is used to do the raw data processing. Please refer this website.\nCode The code used to do raw data processing.\nlibrary(tidymass) #\u0026gt; Registered S3 method overwritten by \u0026#39;Hmisc\u0026#39;: #\u0026gt; method from #\u0026gt; vcov.default fit.models #\u0026gt; ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.0.8 ‚îÄ‚îÄ #\u0026gt; ‚úî massdataset 1.0.25 ‚úî metid 1.2.28 #\u0026gt; ‚úî massprocesser 1.0.10 ‚úî masstools 1.0.10 #\u0026gt; ‚úî masscleaner 1.0.11 ‚úî dplyr 1.1.2 #\u0026gt; ‚úî massqc 1.0.6 ‚úî ggplot2 3.4.2 #\u0026gt; ‚úî massstat 1.0.5 ‚úî magrittr 2.0.3 #\u0026gt; ‚úî metpath 1.0.8 process_data( path = \u0026#34;mzxml_ms1_data/POS\u0026#34;, polarity = \u0026#34;positive\u0026#34;, ppm = 10, peakwidth = c(10, 60), threads = 4, output_tic = FALSE, output_bpc = FALSE, output_rt_correction_plot = FALSE, min_fraction = 0.5, group_for_figure = \u0026#34;QC\u0026#34; ) Results All the results will be placed in the folder mzxml_ms1_data/POS/Result. More information can be found here.\nYou can just load the object, which is a mass_dataset class object.\nload(\u0026#34;mzxml_ms1_data/POS/Result/object\u0026#34;) object #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.8 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 10149 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 4 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 10149 x 3 data.frame] #\u0026gt; 10149 variables:M70T73_POS M70T53_POS M70T183_POS ... M923T55_POS M992T641_POS #\u0026gt; 4.sample_info_note:[ 4 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 0 variables x 0 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 2 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2022-02-22 16:37:06 #\u0026gt; process_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massprocesser process_data 2022-02-22 16:36:42 We can see that there are 10,149 metabolic features in positive mode.\nYou can use the plot_adjusted_rt() function to get the interactive plot.\nload(\u0026#34;mzxml_ms1_data/POS/Result/intermediate_data/xdata2\u0026#34;) ##set the group_for_figure if you want to show specific groups. And set it as \u0026#34;all\u0026#34; if you want to show all samples. plot = massprocesser::plot_adjusted_rt(object = xdata2, group_for_figure = \u0026#34;QC\u0026#34;, interactive = TRUE) plot Negative mode The processing of negative mode is same with positive mode data.\nCode Same with positive mode, change polarity to negative.\nmassprocesser::process_data( path = \u0026#34;mzxml_ms1_data/NEG\u0026#34;, polarity = \u0026#34;negative\u0026#34;, ppm = 10, peakwidth = c(10, 60), threads = 4, output_tic = FALSE, output_bpc = FALSE, output_rt_correction_plot = FALSE, min_fraction = 0.5, group_for_figure = \u0026#34;QC\u0026#34; ) Results Same with positive mode.\nload(\u0026#34;mzxml_ms1_data/NEG/Result/object\u0026#34;) object #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.8 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 8804 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 4 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 8804 x 3 data.frame] #\u0026gt; 8804 variables:M70T712_NEG M70T527_NEG M70T587_NEG ... M941T65_NEG M948T641_NEG #\u0026gt; 4.sample_info_note:[ 4 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 0 variables x 0 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 2 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2022-02-22 16:38:19 #\u0026gt; process_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massprocesser process_data 2022-02-22 16:38:02 We can see that there are 8,804 metabolic features in negative mode.\nSession information sessionInfo() #\u0026gt; R version 4.3.0 (2023-04-21) #\u0026gt; Platform: x86_64-apple-darwin20 (64-bit) #\u0026gt; Running under: macOS Ventura 13.5.1 #\u0026gt; #\u0026gt; Matrix products: default #\u0026gt; BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib #\u0026gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 #\u0026gt; #\u0026gt; locale: #\u0026gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #\u0026gt; #\u0026gt; time zone: America/Los_Angeles #\u0026gt; tzcode source: internal #\u0026gt; #\u0026gt; attached base packages: #\u0026gt; [1] grid stats4 stats graphics grDevices utils datasets #\u0026gt; [8] methods base #\u0026gt; #\u0026gt; other attached packages: #\u0026gt; [1] metid_1.2.28 metpath_1.0.8 ComplexHeatmap_2.16.0 #\u0026gt; [4] mixOmics_6.24.0 lattice_0.21-8 MASS_7.3-58.4 #\u0026gt; [7] massstat_1.0.5 tidyr_1.3.0 ggfortify_0.4.16 #\u0026gt; [10] massqc_1.0.6 masscleaner_1.0.11 xcms_3.22.0 #\u0026gt; [13] MSnbase_2.26.0 ProtGenerics_1.32.0 S4Vectors_0.38.1 #\u0026gt; [16] mzR_2.34.0 Rcpp_1.0.10 Biobase_2.60.0 #\u0026gt; [19] BiocGenerics_0.46.0 BiocParallel_1.34.2 massprocesser_1.0.10 #\u0026gt; [22] ggplot2_3.4.2 dplyr_1.1.2 magrittr_2.0.3 #\u0026gt; [25] masstools_1.0.10 massdataset_1.0.25 tidymass_1.0.8 #\u0026gt; #\u0026gt; loaded via a namespace ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6a8b9c1f45cb3a9fe5879e88b1ae43dc","permalink":"https://www.tidymass.org/docs/chapter4/1-raw_data_processing/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter4/1-raw_data_processing/","section":"docs","summary":"Data preparation Download the demo data and refer this article.\nWe have positive and negative mode. For each mode, we have control, case and QC groups. Control group have 110 samples, and case group have 110 samples as well.","tags":null,"title":"Raw data processing","type":"book"},{"authors":null,"categories":null,"content":"Data preparation Now the positive mode and negative mode have been annotated respectively. We need to merge positive and negative mode data.\nlibrary(tidymass) #\u0026gt; Registered S3 method overwritten by \u0026#39;Hmisc\u0026#39;: #\u0026gt; method from #\u0026gt; vcov.default fit.models #\u0026gt; ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.0.8 ‚îÄ‚îÄ #\u0026gt; ‚úî massdataset 1.0.25 ‚úî metid 1.2.28 #\u0026gt; ‚úî massprocesser 1.0.10 ‚úî masstools 1.0.10 #\u0026gt; ‚úî masscleaner 1.0.11 ‚úî dplyr 1.1.2 #\u0026gt; ‚úî massqc 1.0.6 ‚úî ggplot2 3.4.2 #\u0026gt; ‚úî massstat 1.0.5 ‚úî magrittr 2.0.3 #\u0026gt; ‚úî metpath 1.0.8 library(tidyverse) #\u0026gt; ‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ #\u0026gt; ‚úî forcats 1.0.0 ‚úî readr 2.1.4 #\u0026gt; ‚úî lubridate 1.9.2 ‚úî stringr 1.5.0 #\u0026gt; ‚úî purrr 1.0.1 ‚úî tibble 3.2.1 #\u0026gt; ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ #\u0026gt; ‚úñ xcms::collect() masks dplyr::collect() #\u0026gt; ‚úñ MSnbase::combine() masks Biobase::combine(), BiocGenerics::combine(), dplyr::combine() #\u0026gt; ‚úñ tidyr::expand() masks S4Vectors::expand() #\u0026gt; ‚úñ tidyr::extract() masks magrittr::extract() #\u0026gt; ‚úñ metid::filter() masks metpath::filter(), dplyr::filter(), massdataset::filter(), stats::filter() #\u0026gt; ‚úñ S4Vectors::first() masks dplyr::first() #\u0026gt; ‚úñ xcms::groups() masks dplyr::groups() #\u0026gt; ‚úñ dplyr::lag() masks stats::lag() #\u0026gt; ‚úñ purrr::map() masks mixOmics::map() #\u0026gt; ‚úñ BiocGenerics::Position() masks ggplot2::Position(), base::Position() #\u0026gt; ‚úñ purrr::reduce() masks MSnbase::reduce() #\u0026gt; ‚úñ S4Vectors::rename() masks dplyr::rename(), massdataset::rename() #\u0026gt; ‚úñ lubridate::second() masks S4Vectors::second() #\u0026gt; ‚úñ lubridate::second\u0026lt;-() masks S4Vectors::second\u0026lt;-() #\u0026gt; ‚úñ MASS::select() masks dplyr::select(), massdataset::select() #\u0026gt; ‚úñ purrr::set_names() masks magrittr::set_names() #\u0026gt; ‚Ñπ Use the conflicted package (\u0026lt;http://conflicted.r-lib.org/\u0026gt;) to force all conflicts to become errors Load data load(\u0026#34;metabolite_annotation/object_pos2\u0026#34;) load(\u0026#34;metabolite_annotation/object_neg2\u0026#34;) Remove the features without annotations Positive mode object_pos2 \u0026lt;- object_pos2 %\u0026gt;% activate_mass_dataset(what = \u0026#34;annotation_table\u0026#34;) %\u0026gt;% filter(!is.na(Level)) %\u0026gt;% filter(Level == 1 | Level == 2) object_pos2 #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.1 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 206 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 6 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 206 x 6 data.frame] #\u0026gt; 206 variables:M86T95_POS M95T100_1_POS M100T160_POS ... M568T622_POS M609T427_POS #\u0026gt; 4.sample_info_note:[ 6 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 6 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 1042 variables x 951 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 11 processings in total #\u0026gt; Latest 3 processings show #\u0026gt; update_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset update_mass_dataset() 2022-01-19 21:53:01 #\u0026gt; mutate_ms2 ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate_ms2() 2022-01-19 21:53:36 #\u0026gt; annotate_metabolites_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 metid annotate_metabolites_mass_dataset() 2022-02-22 21:16:23.17454 #\u0026gt; 2 metid annotate_metabolites_mass_dataset() 2022-02-22 21:30:10.706486 #\u0026gt; 3 metid annotate_metabolites_mass_dataset() 2022-02-22 21:47:59.474422 Negative mode object_neg2 \u0026lt;- object_neg2 %\u0026gt;% activate_mass_dataset(what = \u0026#34;annotation_table\u0026#34;) %\u0026gt;% filter(!is.na(Level)) %\u0026gt;% filter(Level == 1 | Level == 2) object_neg2 #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.1 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 165 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 6 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 165 x 6 data.frame] #\u0026gt; 165 variables:M73T74_NEG M75T52_NEG M85T99_NEG ... M480T641_NEG M514T611_NEG #\u0026gt; 4.sample_info_note:[ 6 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 6 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 1092 variables x 988 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 11 processings in total #\u0026gt; Latest 3 processings show #\u0026gt; update_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset update_mass_dataset() 2022-01-19 21:53:37 #\u0026gt; mutate_ms2 ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate_ms2() 2022-01-19 21:54:06 #\u0026gt; annotate_metabolites_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 metid annotate_metabolites_mass_dataset() 2022-02-22 21:50:29.759271 #\u0026gt; 2 metid annotate_metabolites_mass_dataset() 2022-02-22 22:08:10.771619 #\u0026gt; 3 metid annotate_metabolites_mass_dataset() 2022-02-22 22:26:33.968578 Merge data We need to merge positive and negative mode data as one mass_dataset class.\nhead(colnames(object_pos2)) #\u0026gt; [1] \u0026#34;sample_06\u0026#34; \u0026#34;sample_103\u0026#34; \u0026#34;sample_11\u0026#34; \u0026#34;sample_112\u0026#34; \u0026#34;sample_117\u0026#34; #\u0026gt; [6] \u0026#34;sample_12\u0026#34; head(colnames(object_neg2)) #\u0026gt; [1] \u0026#34;sample_06\u0026#34; \u0026#34;sample_103\u0026#34; \u0026#34;sample_11\u0026#34; \u0026#34;sample_112\u0026#34; \u0026#34;sample_117\u0026#34; #\u0026gt; [6] \u0026#34;sample_12\u0026#34; object \u0026lt;- merge_mass_dataset(x = object_pos2, y = object_neg2, sample_direction = \u0026#34;inner\u0026#34;, ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"500e9c0793a06d0bb8e2465cc8f53a01","permalink":"https://www.tidymass.org/docs/chapter8/1-statistical_analysis/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter8/1-statistical_analysis/","section":"docs","summary":"Data preparation Now the positive mode and negative mode have been annotated respectively. We need to merge positive and negative mode data.\nlibrary(tidymass) #\u003e Registered S3 method overwritten by 'Hmisc': #\u003e method from #\u003e vcov.","tags":null,"title":"Statistical analysis","type":"book"},{"authors":null,"categories":null,"content":"Introduction to Metabolomics Data The Danish Project Project studies metabolic changes during human pregnancy and if these altered metabolites could be used to predict preterm.\nReferenced research Liang L, Rasmussen MH, Piening B, Shen X, Chen S, R√∂st H, Snyder JK, Tibshirani R, Skotte L, Lee NC, Contrepois K, Feenstra B, Zackriah H, Snyder M, Melbye M. Metabolic Dynamics and Prediction of Gestational Age and Time to Delivery in Pregnant Women. Cell. 2020 Jun 25;181(7):1680-1692.e15. doi: 10.1016/j.cell.2020.05.002. Introduction to tidyMass project TidyMass is an ecosystem of R packages that share an underlying design philosophy, grammar, and data structure, which provides a comprehensive, reproducible, and object-oriented computational framework. The modular architecture makes tidyMass a highly flexible and extensible tool, which other users can improve and integrate with other tools to customize their own pipeline.\nMore information about tidyMass could be found here: tidymass.org.\nShen X, Yan H, Wang C, Gao P, Johnson CH, Snyder MP. TidyMass an object-oriented reproducible analysis framework for LC-MS data. Nat Commun. 2022 Jul 28;13(1):4365. doi: 10.1038/s41467-022-32155-w. Hopefully, at the end of this module, you will have a better sense of the metabolomics data analysis procedure and how to use R for reproducible data processing and analysis\nData preparation Download the demo data and uncompress it.\nGoogle drive link\nIf you can use Google drive, download here. (code 2022)\nThe demo data contains RPLC positive mode, with 7 participants, and two samples for each participant (Trimester 1 (\u0026lt; 10 weeks) and trimester 3 (\u0026gt; 30 weeks)). So there are 14 samples in total.\nMS1: MS1 is the folder contains the mzXML for 14 samples.\nMS2: MS2 is the folder contains the mgf for QC samples (MS2 spectra).\nsample_info.xlsx: it is the metadata for samples.\n![](/docs/chapter10/figures/Screen-Shot 1.png)\nRaw data processing library(tidymass) #\u0026gt; Registered S3 method overwritten by \u0026#39;Hmisc\u0026#39;: #\u0026gt; method from #\u0026gt; vcov.default fit.models #\u0026gt; ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.0.8 ‚îÄ‚îÄ #\u0026gt; ‚úî massdataset 1.0.25 ‚úî metid 1.2.28 #\u0026gt; ‚úî massprocesser 1.0.10 ‚úî masstools 1.0.10 #\u0026gt; ‚úî masscleaner 1.0.11 ‚úî dplyr 1.1.2 #\u0026gt; ‚úî massqc 1.0.6 ‚úî ggplot2 3.4.2 #\u0026gt; ‚úî massstat 1.0.5 ‚úî magrittr 2.0.3 #\u0026gt; ‚úî metpath 1.0.8 library(tidyverse) #\u0026gt; ‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ #\u0026gt; ‚úî forcats 1.0.0 ‚úî readr 2.1.4 #\u0026gt; ‚úî lubridate 1.9.2 ‚úî stringr 1.5.0 #\u0026gt; ‚úî purrr 1.0.1 ‚úî tibble 3.2.1 #\u0026gt; ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ #\u0026gt; ‚úñ xcms::collect() masks dplyr::collect() #\u0026gt; ‚úñ MSnbase::combine() masks Biobase::combine(), BiocGenerics::combine(), dplyr::combine() #\u0026gt; ‚úñ tidyr::expand() masks S4Vectors::expand() #\u0026gt; ‚úñ tidyr::extract() masks magrittr::extract() #\u0026gt; ‚úñ metid::filter() masks metpath::filter(), dplyr::filter(), massdataset::filter(), stats::filter() #\u0026gt; ‚úñ S4Vectors::first() masks dplyr::first() #\u0026gt; ‚úñ xcms::groups() masks dplyr::groups() #\u0026gt; ‚úñ dplyr::lag() masks stats::lag() #\u0026gt; ‚úñ purrr::map() masks mixOmics::map() #\u0026gt; ‚úñ BiocGenerics::Position() masks ggplot2::Position(), base::Position() #\u0026gt; ‚úñ purrr::reduce() masks MSnbase::reduce() #\u0026gt; ‚úñ S4Vectors::rename() masks dplyr::rename(), massdataset::rename() #\u0026gt; ‚úñ lubridate::second() masks S4Vectors::second() #\u0026gt; ‚úñ lubridate::second\u0026lt;-() masks S4Vectors::second\u0026lt;-() #\u0026gt; ‚úñ MASS::select() masks dplyr::select(), massdataset::select() #\u0026gt; ‚úñ purrr::set_names() masks magrittr::set_names() #\u0026gt; ‚Ñπ Use the conflicted package (\u0026lt;http://conflicted.r-lib.org/\u0026gt;) to force all conflicts to become errors massprocesser package in tidymass is used to do the raw data processing. Please refer this website.\nThe code used to do raw data processing (peak picking, peak grouping).\nmassprocesser::process_data( path = \u0026#34;cell_liang_2020/MS1/\u0026#34;, polarity = \u0026#34;positive\u0026#34;, ppm = 10, peakwidth = c(5, 30), threads = 4, output_tic = TRUE, output_bpc = TRUE, output_rt_correction_plot = FALSE, min_fraction = 0.5 ) All the results will be placed in the folder named MS1/Result. More information about that can be found here.\n![](/docs/chapter10/figures/Screen-Shot 2.png)\nBPC.pdf: BPC plot.\nTIC.pdf: TIC plot.\nRT correction plot.pdf: Retention time correction plot.\nPeak_table.csv: Peak table.\nPeak_table_for_cleaning.csv: Peak table which can be used for data cleaning.\nobject: mass_dataset class object which can be used for subsequent analysis using tidymass.\nintermediate_data: intermediate data.\nYou can just load the object, which is a mass_dataset class object.\nload(\u0026#34;cell_liang_2020/MS1/Result/object\u0026#34;) object #\u0026gt; -------------------- #\u0026gt; massdataset version: 1.0.12 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 9164 x 14 data.frame] #\u0026gt; 2.sample_info:[ 14 x 4 data.frame] #\u0026gt; 14 samples:184 214 289 ... 528 739 #\u0026gt; 3.variable_info:[ 9164 x 3 data.frame] #\u0026gt; 9164 variables:M71T823_POS M72T34_POS M72T822_POS ... M994T593_POS M995T593_POS #\u0026gt; 4.sample_info_note:[ 4 x 2 ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"eb881b3c04fda0c2af05107b91469981","permalink":"https://www.tidymass.org/docs/chapter10/1-whole_workflow/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter10/1-whole_workflow/","section":"docs","summary":"Introduction to Metabolomics Data The Danish Project Project studies metabolic changes during human pregnancy and if these altered metabolites could be used to predict preterm.\nReferenced research Liang L, Rasmussen MH, Piening B, Shen X, Chen S, R√∂st H, Snyder JK, Tibshirani R, Skotte L, Lee NC, Contrepois K, Feenstra B, Zackriah H, Snyder M, Melbye M.","tags":null,"title":"Whole workflow using tidymass","type":"book"},{"authors":null,"categories":null,"content":"mass_dataset class object can also contain MS2 data.\nData preparation mass_dataset class object We need to create a mass_dataset class object first, see this document. And here we use the data from this step as an example.\nload(\u0026#34;feature_table/object_pos\u0026#34;) load(\u0026#34;feature_table/object_neg\u0026#34;) MS2 data The MS2 raw data should be converted to mgf format data. Please refer this document.\nHere we use the demo data for tidymass, please download it and put it in the mgf_ms2_data folder.\nüíæ Download link is here.\nThen uncompress it.\nAdd MS2 to mass_dataset class object Positive mode.\nlibrary(massdataset) object_pos2 = mutate_ms2( object = object_pos, column = \u0026#34;rp\u0026#34;, polarity = \u0026#34;positive\u0026#34;, ms1.ms2.match.mz.tol = 10, ms1.ms2.match.rt.tol = 15, path = \u0026#34;mgf_ms2_data/POS/\u0026#34; ) object_pos2 #\u0026gt; -------------------- #\u0026gt; massdataset version: 1.0.25 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 1612 x 36 data.frame] #\u0026gt; 2.sample_info:[ 36 x 4 data.frame] #\u0026gt; 36 samples:bl20210902_3 bl20210902_4 bl20210902_5 ... bl20210902_37 bl20210902_38 #\u0026gt; 3.variable_info:[ 1612 x 3 data.frame] #\u0026gt; 1612 variables:M86T44_POS M90T638_POS M91T631_POS ... M1197T265_POS M1198T265_POS #\u0026gt; 4.sample_info_note:[ 4 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 9 variables x 9 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 2 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2023-09-03 09:57:14 #\u0026gt; mutate_ms2 ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate_ms2() 2023-09-03 10:27:03 object_pos2@ms2_data #\u0026gt; $`QEP_SGA_QC_posi_ms2_ce25_01.mgf;QEP_SGA_QC_posi_ms2_ce25_02.mgf;QEP_SGA_QC_posi_ms2_ce50_01.mgf;QEP_SGA_QC_posi_ms2_ce50_02.mgf` #\u0026gt; -------------------- #\u0026gt; column: rp #\u0026gt; polarity: positive #\u0026gt; mz_tol: 10 #\u0026gt; rt_tol (second): 15 #\u0026gt; -------------------- #\u0026gt; 9 variables: #\u0026gt; M103T92_POS M120T92_1_POS M133T255_POS M149T93_POS M166T94_POS... #\u0026gt; 9 MS2 spectra. #\u0026gt; mz103.054814801682rt96.92601 mz120.081003145403rt103.263636 mz133.101364135742rt269.674188 mz149.059844970703rt99.091818 mz166.086254683842rt103.128918... Negative mode.\nobject_neg2 = mutate_ms2( object = object_neg, column = \u0026#34;rp\u0026#34;, polarity = \u0026#34;negative\u0026#34;, ms1.ms2.match.mz.tol = 10, ms1.ms2.match.rt.tol = 15, path = \u0026#34;mgf_ms2_data/NEG/\u0026#34; ) object_neg2@ms2_data #\u0026gt; $`QEP_SGA_QC_neg_ms2_ce25_01.mgf;QEP_SGA_QC_neg_ms2_ce25_02.mgf;QEP_SGA_QC_neg_ms2_ce50_01.mgf;QEP_SGA_QC_neg_ms2_ce50_02.mgf` #\u0026gt; -------------------- #\u0026gt; column: rp #\u0026gt; polarity: negative #\u0026gt; mz_tol: 10 #\u0026gt; rt_tol (second): 15 #\u0026gt; -------------------- #\u0026gt; 44 variables: #\u0026gt; M101T106_NEG M116T626_NEG M116T505_NEG M116T483_NEG M116T586_NEG... #\u0026gt; 43 MS2 spectra. #\u0026gt; mz101.023086547852rt97.383582 mz115.919448852539rt634.03908 mz115.919456481934rt515.338818 mz115.919372558594rt471.106446 mz115.919403076172rt591.442212... Session information sessionInfo() #\u0026gt; R version 4.3.0 (2023-04-21) #\u0026gt; Platform: x86_64-apple-darwin20 (64-bit) #\u0026gt; Running under: macOS Ventura 13.5.1 #\u0026gt; #\u0026gt; Matrix products: default #\u0026gt; BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib #\u0026gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 #\u0026gt; #\u0026gt; locale: #\u0026gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #\u0026gt; #\u0026gt; time zone: America/Los_Angeles #\u0026gt; tzcode source: internal #\u0026gt; #\u0026gt; attached base packages: #\u0026gt; [1] stats graphics grDevices utils datasets methods base #\u0026gt; #\u0026gt; other attached packages: #\u0026gt; [1] ggplot2_3.4.2 dplyr_1.1.2 magrittr_2.0.3 masstools_1.0.10 #\u0026gt; [5] massdataset_1.0.25 #\u0026gt; #\u0026gt; loaded via a namespace (and not attached): #\u0026gt; [1] bitops_1.0-7 pbapply_1.7-0 #\u0026gt; [3] remotes_2.4.2 rlang_1.1.1 #\u0026gt; [5] clue_0.3-64 GetoptLong_1.0.5 #\u0026gt; [7] matrixStats_1.0.0 compiler_4.3.0 #\u0026gt; [9] png_0.1-8 vctrs_0.6.2 #\u0026gt; [11] stringr_1.5.0 ProtGenerics_1.32.0 #\u0026gt; [13] pkgconfig_2.0.3 shape_1.4.6 #\u0026gt; [15] crayon_1.5.2 fastmap_1.1.1 #\u0026gt; [17] XVector_0.40.0 utf8_1.2.3 #\u0026gt; [19] rmarkdown_2.22 tzdb_0.4.0 #\u0026gt; [21] preprocessCore_1.62.1 purrr_1.0.1 #\u0026gt; [23] xfun_0.39 zlibbioc_1.46.0 #\u0026gt; [25] cachem_1.0.8 GenomeInfoDb_1.36.0 #\u0026gt; [27] jsonlite_1.8.5 DelayedArray_0.26.3 #\u0026gt; [29] BiocParallel_1.34.2 parallel_4.3.0 #\u0026gt; [31] cluster_2.1.4 R6_2.5.1 #\u0026gt; [33] stringi_1.7.12 bslib_0.5.0 #\u0026gt; [35] RColorBrewer_1.1-3 limma_3.56.2 #\u0026gt; [37] GenomicRanges_1.52.0 jquerylib_0.1.4 #\u0026gt; [39] Rcpp_1.0.10 bookdown_0.34 #\u0026gt; [41] SummarizedExperiment_1.30.2 iterators_1.0.14 #\u0026gt; [43] knitr_1.43 readr_2.1.4 #\u0026gt; [45] IRanges_2.34.0 Matrix_1.5-4 #\u0026gt; [47] tidyselect_1.2.0 rstudioapi_0.14 #\u0026gt; [49] yaml_2.3.7 doParallel_1.0.17 #\u0026gt; [51] codetools_0.2-19 affy_1.78.0 #\u0026gt; [53] blogdown_1.18.1 lattice_0.21-8 #\u0026gt; [55] tibble_3.2.1 plyr_1.8.8 #\u0026gt; [57] withr_2.5.0 Biobase_2.60.0 #\u0026gt; [59] evaluate_0.21 zip_2.3.0 #\u0026gt; [61] circlize_0.4.15 pillar_1.9.0 #\u0026gt; [63] affyio_1.70.0 BiocManager_1.30.21 #\u0026gt; [65] MatrixGenerics_1.12.2 foreach_1.5.2 #\u0026gt; [67] stats4_4.3.0 MSnbase_2.26.0 #\u0026gt; [69] MALDIquant_1.22.1 ncdf4_1.21 #\u0026gt; [71] generics_0.1.3 rprojroot_2.0.3 #\u0026gt; [73] ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1a44bd8c831dbe76c4f73e7a2d8c5b4a","permalink":"https://www.tidymass.org/docs/chapter2/2-add_ms2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter2/2-add_ms2/","section":"docs","summary":"mass_dataset class object can also contain MS2 data.\nData preparation mass_dataset class object We need to create a mass_dataset class object first, see this document. And here we use the data from this step as an example.","tags":null,"title":"Add MS2 spectra data into mass_dataset class object","type":"book"},{"authors":null,"categories":null,"content":"If you have in-house standards which have been acquired with MS2 spectra data, then you can construct the in-house MS2 spectra databases using the metid package.\nThere are no specific requirements on how to run the LC/MS data for users. As the in-house database construction in metid is used for users to get the in-house databases for themselves (including m/z, retention time and MS/MS spectra of metabolites, for level 1 annotation (Sumner et al., 2007)), so the users just need to run the standards using the same column, LC-gradient, and MS settings with their real samples in the lab\nData preparation Firstly, please transform your raw standard MS data (positive and negative modes) to mzXML format using ProteoWizard. The parameter setting is shown in the figure below:\nData organization Secondly, please organize your standard information as a table, and output it in a csv or xlsx format. The format of standard information can refer to our demo data in demoData package.\nFrom column 1 to 11, the columns are ‚ÄúLab.ID‚Äù, ‚ÄúCompound.name‚Äù, ‚Äúmz‚Äù, ‚ÄúRT‚Äù, ‚ÄúCAS.ID‚Äù, ‚ÄúHMDB.ID‚Äù, ‚ÄúKEGG.ID‚Äù, ‚ÄúFormula‚Äù, ‚Äúmz.pos‚Äù, ‚Äúmz.neg‚Äù, ‚ÄúSubmitter‚Äù, respectively. It is OK if you have other information for the standards. As the demo data show, there are other additional information, namely ‚ÄúFamily‚Äù, ‚ÄúSub.pathway‚Äù and ‚ÄúNote‚Äù.\nLab.ID: No duplicated.\nmz: Accurate mass of compounds.\nRT: Retention time, unit is second.\nmz.pos: Mass to change ratio of compound in positive mode, for example, M+H. You can set it as NA.\nmz.neg: Mass to change ratio of compound in negative mode, for example, M-H. You can set it as NA.\nSubmitter: The name of person or organization. You can set it as NA.\nThen create a folder and put your mzXML format datasets (positive mode in ‚ÄòPOS‚Äô folder and negative mode in ‚ÄòNEG‚Äô folder) and compound information in it. The mzXML file should have the collision energy in the name of each file. For example, test_NCE25.mzXML.\nThe names of the mzXML files should be like this: xxx_NCE25.mzXML.\nRun construct_database() function Here we use the demo data from demoData package to show how to use the construct_database() function to construct database.\nWe first prepare dataset.\nDownload the data here. and then put all of them in the ‚Äúdatabase_construction‚Äù folder.\nThen there will be a folder named as database_construction in your work directory like below figure shows:\nThen we run construct_database() function and then we can get the database.\nlibrary(metid) new.path \u0026lt;- file.path(\u0026#34;./database_construction\u0026#34;) test.database \u0026lt;- construct_database( path = new.path, version = \u0026#34;0.0.1\u0026#34;, metabolite.info.name = \u0026#34;metabolite.info_RPLC.csv\u0026#34;, source = \u0026#34;Michael Snyder lab\u0026#34;, link = \u0026#34;http://snyderlab.stanford.edu/\u0026#34;, creater = \u0026#34;Xiaotao Shen\u0026#34;, email = \u0026#34;shenxt1990@163.com\u0026#34;, rt = TRUE, mz.tol = 15, rt.tol = 30, threads = 3 ) The arguments of construct_database() can be found by ?construct_database().\ntest.database is a databaseClass object, you can print it to see its information.\ntest.database #\u0026gt; -----------Base information------------ #\u0026gt; Version:0.0.1 #\u0026gt; Source:Michael Snyder lab #\u0026gt; Link:http://snyderlab.stanford.edu/ #\u0026gt; Creater:Xiaotao Shen(shenxt1990@163.com) #\u0026gt; With RT information #\u0026gt; -----------Spectral information------------ #\u0026gt; 14 items of metabolite information: #\u0026gt; Lab.ID; Compound.name; mz; RT; CAS.ID; HMDB.ID; KEGG.ID; Formula; mz.pos; mz.neg (top10) #\u0026gt; 172 metabolites in total. #\u0026gt; 41 metabolites with spectra in positive mode. #\u0026gt; 45 metabolites with spectra in negative mode. #\u0026gt; Collision energy in positive mode (number:): #\u0026gt; Total number:1 #\u0026gt; NCE25 #\u0026gt; Collision energy in negative mode: #\u0026gt; Total number:1 #\u0026gt; NCE25 Note: test.database is only a demo database (metIdentifyClass object). We will don‚Äôt use it for next metabolite identification. Then please save this database in you local folder, please note that the saved file name and database name must be same. For example:\nsave(test.database, file = \u0026#34;test.database\u0026#34;) If you save the test.database as a different name, it will be a error when you use it.\nMS1 database If you do not have MS2 data, you can also use construct_database() function to construct MS1 database.\nSession information sessionInfo() #\u0026gt; R version 4.3.0 (2023-04-21) #\u0026gt; Platform: x86_64-apple-darwin20 (64-bit) #\u0026gt; Running under: macOS Ventura 13.5.1 #\u0026gt; #\u0026gt; Matrix products: default #\u0026gt; BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib #\u0026gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 #\u0026gt; #\u0026gt; locale: #\u0026gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #\u0026gt; #\u0026gt; time zone: America/Los_Angeles #\u0026gt; tzcode source: internal #\u0026gt; #\u0026gt; attached base packages: #\u0026gt; [1] stats4 stats graphics grDevices utils datasets methods #\u0026gt; [8] base #\u0026gt; #\u0026gt; other attached packages: #\u0026gt; [1] MSnbase_2.26.0 ProtGenerics_1.32.0 S4Vectors_0.38.1 #\u0026gt; [4] mzR_2.34.0 Rcpp_1.0.10 Biobase_2.60.0 #\u0026gt; [7] BiocGenerics_0.46.0 ggplot2_3.4.2 massdataset_1.0.25 #\u0026gt; [10] dplyr_1.1.2 ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"5de48c46289c064fc9af9c12cd762bc4","permalink":"https://www.tidymass.org/docs/chapter7/2-in_house_database/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter7/2-in_house_database/","section":"docs","summary":"If you have in-house standards which have been acquired with MS2 spectra data, then you can construct the in-house MS2 spectra databases using the metid package.\nThere are no specific requirements on how to run the LC/MS data for users.","tags":null,"title":"Construct in-house MS2 database","type":"book"},{"authors":null,"categories":null,"content":"getwd() #\u0026gt; [1] \u0026#34;/Users/xiaotaoshen/tidymass/tidymass-website/content/docs/chapter3\u0026#34; Introduction massconverter is a package in tidymass project which can be used to convert mass spectrometry raw data based on docker image of pwid.\nNow massconverter is only supports mac or Linux OS.\nData preparation Please place the raw data in one folder according to MS1 and MS2. Then you can convert them using massconverter package.\nPull pwiz docker Please run docker first.\nWe need the docker image: https://hub.docker.com/r/chambm/pwiz-skyline-i-agree-to-the-vendor-licenses. So first we need use the docker_pull_pwiz() to pull this image.\nlibrary(massconverter) docker_pull_pwiz() If you want to pull the latest version, set force = TRUE\ndocker_pull_pwiz(force = TRUE) Set massconvert parameters The we need to set parameters for massconvert.\nparameter = massconverter::create_msconvert_parameter( output_format = \u0026#34;mzXML\u0026#34;, binary_encoding_precision = \u0026#34;32\u0026#34;, zlib = TRUE, write_index = TRUE, peak_picking_algorithm = \u0026#34;cwt\u0026#34;, vendor_mslevels = c(1, NA), cwt_mslevels = c(1, NA), cwt_min_snr = 0.1, cwt_min_peak_spacing = 0.1, subset_polarity = \u0026#34;positive\u0026#34;, subset_scan_number = c(NA, NA), subset_scan_time = c(60, 300), subset_mslevels = c(1, 2), zero_samples_mode = \u0026#34;removeExtra\u0026#34;, zero_samples_mslevels = c(1, NA), zero_samples_add_missing_flanking_zero_count = 5 ) parameter #\u0026gt; -------------------- #\u0026gt; pacakge_name: massconverter #\u0026gt; function_name: create_msconvert_parameter #\u0026gt; time: 2023-09-03 20:09:02.150448 #\u0026gt; parameters: #\u0026gt; output_format : mzXML #\u0026gt; binary_encoding_precision : 32 #\u0026gt; zlib : TRUE #\u0026gt; write_index : TRUE #\u0026gt; peak_picking_algorithm : cwt #\u0026gt; vendor_mslevels : c(1, NA) #\u0026gt; cwt_mslevels : c(1, NA) #\u0026gt; cwt_min_snr : 0.1 #\u0026gt; cwt_min_peak_spacing : 0.1 #\u0026gt; subset_polarity : positive #\u0026gt; subset_scan_number : c(NA, NA) #\u0026gt; subset_scan_time : c(60, 300) #\u0026gt; subset_mslevels : c(1, 2) #\u0026gt; zero_samples_mode : removeExtra #\u0026gt; zero_samples_mslevels : c(1, NA) #\u0026gt; zero_samples_add_missing_flanking_zero_count : 5 Convert data Just put the raw data into one folder, and then begin to convert data.\nHere we use the demo data, please download them here. And then put them in one folder named as demo_data/raw_data.\nconvert_raw_data(input_path = \u0026#34;demo_data/raw_data\u0026#34;, output_path = \u0026#34;demo_data/mzxml\u0026#34;, msconvert_parameter = parameter, docker_parameters = c(), process_all = FALSE) Then the converted data will be in the demo_data/mzxml\nBash code If you want to run it in bash, you can also use the get_run_code() to get the code that can run in bash.\nget_run_code( input_path = \u0026#34;demo_data/raw_data\u0026#34;, output_path = \u0026#34;demo_data/mzxml\u0026#34;, msconvert_parameter = parameter, docker_parameters = c(), process_all = FALSE ) #\u0026gt; NULL pwiz This is a docker image of of proteowizard.\nJust type this in terminal:\ndocker run -it --rm chambm/pwiz-skyline-i-agree-to-the-vendor-licenses wine msconvert --help Detailed help of msconvert Convert mass spec data file formats. Return value: # of failed files. Options: -f [ --filelist ] arg : specify text file containing filenames -o [ --outdir ] arg (=.) : set output directory (\u0026#39;-\u0026#39; for stdout) [.] -c [ --config ] arg : configuration file (optionName=value) --outfile arg : Override the name of output file. -e [ --ext ] arg : set extension for output files [mzML|mzXML|mgf|txt|mz5] --mzML : write mzML format [default] --mzXML : write mzXML format --mz5 : write mz5 format --mgf : write Mascot generic format --text : write ProteoWizard internal text format --ms1 : write MS1 format --cms1 : write CMS1 format --ms2 : write MS2 format --cms2 : write CMS2 format -v [ --verbose ] : display detailed progress information --64 : set default binary encoding to 64-bit precision [default] --32 : set default binary encoding to 32-bit precision --mz64 : encode m/z values in 64-bit precision [default] --mz32 : encode m/z values in 32-bit precision --inten64 : encode intensity values in 64-bit precision --inten32 : encode intensity values in 32-bit precision [default] --noindex : do not write index -i [ --contactInfo ] arg : filename for contact info -z [ --zlib ] : use zlib compression for binary data --numpressLinear [=arg(=2e-09)] : use numpress linear prediction compression for binary mz and rt data (relative accuracy loss will not exceed given tolerance arg, unless set to 0) --numpressLinearAbsTol [=arg(=-1)] : desired absolute tolerance for linear numpress prediction (e.g. use 1e-4 for a mass accuracy of 0.2 ppm at 500 m/z, default uses -1.0 for maximal accuracy). Note: setting this value may substantially reduce file size, this overrides relative accuracy tolerance. --numpressPic : use numpress positive integer compression for binary intensities (absolute accuracy loss will not exceed 0.5) --numpressSlof [=arg(=0.0002)] : use numpress short logged float compression for binary intensities (relative accuracy loss will not exceed given tolerance arg, unless set to 0) -n [ --numpressAll ] : same as --numpressLinear --numpressSlof (see ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6190ec2e6b613decdc0718606d4ee9fd","permalink":"https://www.tidymass.org/docs/chapter3/2-data_convert/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter3/2-data_convert/","section":"docs","summary":"getwd() #\u003e [1] \"/Users/xiaotaoshen/tidymass/tidymass-website/content/docs/chapter3\" Introduction massconverter is a package in tidymass project which can be used to convert mass spectrometry raw data based on docker image of pwid.\nNow massconverter is only supports mac or Linux OS.","tags":null,"title":"Convert data using massconverter","type":"book"},{"authors":null,"categories":null,"content":"Check tidymass version You can use the tidymass to check the version of all packages and update them.\nIf you want to check if there are updates for tidymass and packages in it. Just check it like this.\ntidymass::check_tidymass_version() ## Registered S3 method overwritten by \u0026#39;Hmisc\u0026#39;: ## method from ## vcov.default fit.models ## ##tidymass/tidymass is up-to-date devel version ## ##tidymass/massconverter is up-to-date devel version ## ##tidymass/massdataset is up-to-date devel version ## ##tidymass/massprocesser is up-to-date devel version ## ##tidymass/masscleaner is up-to-date devel version ## ##tidymass/metid is up-to-date devel version ## ##tidymass/massstat is up-to-date devel version ## ##tidymass/metpath is up-to-date devel version ## ##tidymass/masstools is up-to-date devel version ## Use update_tidymass() to update the following pacakges. ## package installed_version latest_version up_to_date ## 1 massqc 1.0.6 1.0.5 FALSE This will list all the packages version and if there are some new versions can be updated.\nUpdate tidymass The update_tidymass() function can be used to update tidymass and packages within it.\ntidymass::update_tidymass(from = \u0026#34;gitlab\u0026#34;) You can change the from argument if from = \u0026#34;gitlab\u0026#34; doesn‚Äôt work.\n‚Äúgithub‚Äù\n‚Äúgitee‚Äù\n‚Äútidymass.org‚Äù\nIf all the options of from don‚Äôt work, you can try to set fastgit as TRUE.\ntidymass::update_tidymass(from = \u0026#34;gitlab\u0026#34;, fastgit = TRUE) Session information sessionInfo() ## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin20 (64-bit) ## Running under: macOS Ventura 13.5.1 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## time zone: America/Los_Angeles ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] splines_4.3.0 bitops_1.0-7 ## [3] cellranger_1.1.0 tibble_3.2.1 ## [5] polyclip_1.10-4 preprocessCore_1.62.1 ## [7] XML_3.99-0.14 rpart_4.1.19 ## [9] fastDummies_1.6.3 lifecycle_1.0.3 ## [11] doParallel_1.0.17 globals_0.16.2 ## [13] lattice_0.21-8 MASS_7.3-58.4 ## [15] backports_1.4.1 magrittr_2.0.3 ## [17] plotly_4.10.2 openxlsx_4.2.5.2 ## [19] limma_3.56.2 Hmisc_5.1-0 ## [21] sass_0.4.6 rmarkdown_2.22 ## [23] jquerylib_0.1.4 yaml_2.3.7 ## [25] remotes_2.4.2 doRNG_1.8.6 ## [27] zip_2.3.0 MsCoreUtils_1.12.0 ## [29] pbapply_1.7-0 metid_1.2.30 ## [31] RColorBrewer_1.1-3 zlibbioc_1.46.0 ## [33] GenomicRanges_1.52.0 purrr_1.0.1 ## [35] ggraph_2.1.0 BiocGenerics_0.46.0 ## [37] itertools_0.1-3 RCurl_1.98-1.12 ## [39] nnet_7.3-18 tweenr_2.0.2 ## [41] massstat_1.0.5 circlize_0.4.15 ## [43] GenomeInfoDbData_1.2.10 IRanges_2.34.0 ## [45] S4Vectors_0.38.1 ggrepel_0.9.3 ## [47] listenv_0.9.0 ellipse_0.4.5 ## [49] masstools_1.0.10 RSpectra_0.16-1 ## [51] missForest_1.5 parallelly_1.36.0 ## [53] MSnbase_2.26.0 ncdf4_1.21 ## [55] codetools_0.2-19 DelayedArray_0.26.3 ## [57] ggforce_0.4.1 tidyselect_1.2.0 ## [59] shape_1.4.6 farver_2.1.1 ## [61] viridis_0.6.3 massdataset_1.0.25 ## [63] matrixStats_1.0.0 stats4_4.3.0 ## [65] base64enc_0.1-3 massqc_1.0.6 ## [67] jsonlite_1.8.5 GetoptLong_1.0.5 ## [69] multtest_2.56.0 e1071_1.7-13 ## [71] tidygraph_1.2.3 Formula_1.2-5 ## [73] survival_3.5-5 iterators_1.0.14 ## [75] foreach_1.5.2 progress_1.2.2 ## [77] tools_4.3.0 Rcpp_1.0.10 ## [79] glue_1.6.2 rARPACK_0.11-0 ## [81] gridExtra_2.3 xfun_0.39 ## [83] mixOmics_6.24.0 MatrixGenerics_1.12.2 ## [85] ggfortify_0.4.16 GenomeInfoDb_1.36.0 ## [87] dplyr_1.1.2 withr_2.5.0 ## [89] BiocManager_1.30.21 fastmap_1.1.1 ## [91] fansi_1.0.4 blogdown_1.18.1 ## [93] digest_0.6.31 R6_2.5.1 ## [95] colorspace_2.1-0 utf8_1.2.3 ## [97] tidyr_1.3.0 generics_0.1.3 ## [99] data.table_1.14.8 corpcor_1.6.10 ## [101] robustbase_0.95-1 class_7.3-21 ## [103] graphlayouts_1.0.0 prettyunits_1.1.1 ## [105] httr_1.4.6 htmlwidgets_1.6.2 ## [107] S4Arrays_1.0.4 pkgconfig_2.0.3 ## [109] gtable_0.3.3 robust_0.7-1 ## [111] tidymass_1.0.8 ComplexHeatmap_2.16.0 ## [113] impute_1.74.1 MassSpecWavelet_1.66.0 ## [115] XVector_0.40.0 furrr_0.3.1 ## [117] pcaPP_2.0-3 htmltools_0.5.5 ## [119] bookdown_0.34 MALDIquant_1.22.1 ## [121] ProtGenerics_1.32.0 clue_0.3-64 ## [123] scales_1.2.1 Biobase_2.60.0 ## [125] png_0.1-8 knitr_1.43 ## [127] rstudioapi_0.14 tzdb_0.4.0 ## [129] reshape2_1.4.4 rjson_0.2.21 ## [131] checkmate_2.2.0 ggcorrplot_0.1.4 ## [133] proxy_0.4-27 cachem_1.0.8 ## [135] GlobalOptions_0.1.2 stringr_1.5.0 ## [137] parallel_4.3.0 foreign_0.8-84 ## [139] mzID_1.38.0 vsn_3.68.0 ## [141] pillar_1.9.0 grid_4.3.0 ## [143] vctrs_0.6.2 MsFeatures_1.8.0 ## [145] RANN_2.6.1 pcaMethods_1.92.0 ## [147] randomForest_4.7-1.1 cluster_2.1.4 ## [149] htmlTable_2.4.1 evaluate_0.21 ## [151] readr_2.1.4 mvtnorm_1.2-2 ## [153] ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"d1b20c33943147c88905d5a963b55421","permalink":"https://www.tidymass.org/docs/chapter1/2-update/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter1/2-update/","section":"docs","summary":"Check tidymass version You can use the tidymass to check the version of all packages and update them.\nIf you want to check if there are updates for tidymass and packages in it.","tags":null,"title":"Update tidymass","type":"book"},{"authors":null,"categories":null,"content":" If you don‚Äôt want to use the massprocesser for raw data processing, you can absolutely use other tools (mzMine or MS-DIAL). Then you can just use the functions from massdataset convert results from them to mass_dataset class.\nmzMine feature table to mass_dataset class We can also directory convert feature table from mzMine to mass_dataset class.\nAn example feature table from mzMine.\nrow ID row m/z row retention time 10232_P4_RE4_01_476.mzXML Peak area 10765_P4_RE9_01_482.mzXML Peak area 10546_P4_RG11_01_515.mzXML Peak area 11035_P4_RB4_01_431.mzXML Peak area 11163_P4_RB11_01_439.mzXML Peak area 13541_P4_RG3_01_506.mzXML Peak area 10712_P4_RH3_01_521.mzXML Peak area 10715_P4_RA4_01_415.mzXML Peak area 11111_P4_RB1_01_428.mzXML Peak area 14153_P4_RH8_01_526.mzXML Peak area 18404_P3_RF6_01_370.mzXML Peak area 16500_P2_RD8_01_209.mzXML Peak area 13917_P4_RA10_01_423.mzXML Peak area 16501_P2_RD9_01_210.mzXML Peak area 14880_P3_RA3_01_290.mzXML Peak area 15581_P2_RD4_01_203.mzXML Peak area 29342_P5_RF3_01_620.mzXML Peak area 15623_P2_RC3_01_187.mzXML Peak area 12262_P1_RE5_01_94.mzXML Peak area 27373_P2_RD5_01_204.mzXML Peak area 31878_P1_RH3_01_131.mzXML Peak area 14563_P1_RE10_01_99.mzXML Peak area 1 108.51790 10.2450500 1389687.3 1401752.8480 1402784.636 1655499.2620 1426946.493 1405055.9660 1301424.669 1662174.681 1669773.721 1292471.387 1401058.637 1255984.4230 1790633.057 1239958.238 1384508.9720 1321642.0710 1342898.3700 1428609.6720 0.0000 1309347.2150 0.0000 0.0000 2 184.98560 10.2452886 824854.7 879329.1425 810711.735 918538.3715 904935.909 863844.4710 813936.417 959157.637 975521.439 819906.655 802451.828 805424.3155 999066.451 797460.926 859813.0540 821147.7515 764305.2440 859406.4050 319453.1235 812621.5885 321342.3140 343921.0690 3 99.51304 10.2443175 779963.5 809016.6085 784838.328 918355.9300 869348.549 825338.7765 757906.488 890287.086 945978.115 779467.920 784715.819 698338.0110 995229.289 690797.471 755029.1590 725875.2240 727123.4860 804957.7900 0.0000 729996.3135 38.4895 0.0000 4 176.97199 10.4564667 3371036.7 3594238.9280 3335427.676 4762133.1830 4446552.344 4146207.5600 3450606.135 4270036.005 4082635.767 3346233.572 3600719.191 2005356.8930 5118346.235 1864347.092 3200536.9310 2686899.6920 2419853.5010 2592535.6610 28303.9595 2038650.7540 83238.3495 83362.9450 6 186.95641 10.4707553 3649387.6 2918579.6220 3566568.107 3498499.8270 4051221.114 3776597.5020 3112944.981 4300303.555 3604041.890 3146833.394 2953320.137 2684677.9820 4608083.237 2684874.606 2989385.9440 2762750.3290 2746261.2350 2481040.2540 100953.5900 2617117.6550 430218.5365 368020.7355 7 108.51790 12.7904623 799957.0 761629.1865 746393.253 899613.6160 790027.581 766091.8005 671510.760 944502.539 971766.830 685098.196 849756.571 542205.9105 1032801.917 545116.523 638052.1745 597619.4125 794760.3465 720902.4030 0.0000 588069.0120 0.0000 0.0000 8 385.34662 8.7025212 381404.3 6020.1035 3911035.531 3824098.1500 1132826.624 1292241.2550 473024.037 382329.680 5004038.667 447072.791 993039.140 232988.1335 670940.829 1643522.567 189589.2720 368272.7385 1522168.9890 3761.5005 3138.2980 406.4040 1945.7660 1093.3310 11 204.96686 10.4736500 3034650.4 3095215.5970 2913787.388 3498463.5280 2065412.106 3052362.2980 2899885.748 3253480.456 2813586.168 2165733.182 3151294.446 1734535.7960 3801018.652 1835146.810 2629039.2080 2245447.8240 1867941.1940 1696709.7900 241538.4625 692056.1335 503664.3570 243778.7115 13 338.34191 7.3854864 303027.7 1006307.2360 999990.067 989577.2140 933082.105 1015312.4380 896753.114 1203514.041 1282705.642 1145951.757 944308.115 2276.4715 1495901.279 2283.024 1180343.8770 2166.8290 422690.5625 6598.3380 6388.0065 912.4290 2231.9690 2095.7065 16 413.37818 9.1966913 210327.6 479.1205 786950.833 26748.8650 139136.774 186177.9465 50304.317 53174.656 628098.439 92549.659 0.000 1465.6875 189928.009 118.002 18649.2475 1474.5875 327756.8435 1630.4785 3405.3670 2328.2380 117.6780 4244.3370 17 182.98522 10.8992432 2475759.3 2404859.6370 2097261.452 1926445.7900 1975307.181 1911980.2000 2000412.664 2078662.325 2282092.591 1125846.391 2219811.100 1716983.2250 2133813.440 1743594.472 1157099.5610 1820168.8180 1539026.4870 1287213.0250 201414.1055 1783111.6970 71438.3140 378266.7025 19 133.97465 10.2386129 337881.9 356574.0285 345000.317 366412.4590 356841.915 359269.9585 357298.280 381860.237 371393.549 346286.859 354765.566 318203.7765 376205.781 322735.553 335437.6750 335219.5500 356433.1045 339622.0840 87.0705 324784.6100 49.0280 72.8740 20 98.51249 10.2775263 477431.3 567034.7915 539719.467 660605.9185 611086.740 585832.5370 551825.500 726973.096 719105.168 470520.271 753253.574 804104.3385 708266.139 705101.297 554312.1600 698823.3445 585776.2505 491097.7935 0.0000 700518.6085 0.0000 0.0000 21 159.96892 10.8786371 2536098.9 2373284.0680 2052707.733 2282023.8930 2348547.121 1958789.6540 1957354.485 1392103.616 2521347.853 2015996.332 2424475.604 1081063.7040 2442871.263 928332.461 711932.2725 1216824.7770 1493565.8430 ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"e8bc8c09e133000eaf090ea976faa065","permalink":"https://www.tidymass.org/docs/chapter2/3-mass_dataset_other_tools/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter2/3-mass_dataset_other_tools/","section":"docs","summary":"If you don‚Äôt want to use the massprocesser for raw data processing, you can absolutely use other tools (mzMine or MS-DIAL). Then you can just use the functions from massdataset convert results from them to mass_dataset class.","tags":null,"title":"Create mass_dataset class from other tools","type":"book"},{"authors":null,"categories":null,"content":"Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. So it is useful for people who want to share the code, data, and even analysis environment with other people to repeat their analysis and results.\nWe provide a docker version of tidymass, all the packages in tidymass and the dependent packages have been installed.\nInstall docker Please refer to the offical website to download and install docker. And then run docker.\nPull the tidymass image Open you terminal and then type code below:\ndocker pull jaspershen/tidymass:latest Run tidymass docker image In you terminal, run the code below:\ndocker run -e PASSWORD=tidymass -p 8787:8787 jaspershen/tidymass:latest The below command will link the RStudio home folder with the desktop of the local machine running the container. Anything saved or edited in the home folder when using the container will be stored on the local desktop.\ndocker run -e PASSWORD=tidymass -v ~/Desktop:/home/rstudio/ -p 8787:8787 jaspershen/tidymass:latest Open the RStudio server Then open the browser and visit http://localhost:8787 to power on RStudio server. The user name is rstudio and the password is tidymass.\nDemo data and example analysis code In this tidymass docker image, a folder named ‚Äúdemo_data‚Äù is included to help users to learn how to use tidymass.\nOpen the tidymass_demo.Rmd file in demo_data folder, and then run it code chunk by chunk or just render it by clicking Knit on RStudio, you will get a reporting result (HTML format) of all the whole workflow.\nSession information sessionInfo() #\u0026gt; R version 4.3.0 (2023-04-21) #\u0026gt; Platform: x86_64-apple-darwin20 (64-bit) #\u0026gt; Running under: macOS Ventura 13.5.1 #\u0026gt; #\u0026gt; Matrix products: default #\u0026gt; BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib #\u0026gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 #\u0026gt; #\u0026gt; locale: #\u0026gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #\u0026gt; #\u0026gt; time zone: America/Los_Angeles #\u0026gt; tzcode source: internal #\u0026gt; #\u0026gt; attached base packages: #\u0026gt; [1] stats graphics grDevices utils datasets methods base #\u0026gt; #\u0026gt; loaded via a namespace (and not attached): #\u0026gt; [1] digest_0.6.31 R6_2.5.1 bookdown_0.34 fastmap_1.1.1 #\u0026gt; [5] xfun_0.39 blogdown_1.18.1 cachem_1.0.8 knitr_1.43 #\u0026gt; [9] htmltools_0.5.5 rmarkdown_2.22 cli_3.6.1 sass_0.4.6 #\u0026gt; [13] jquerylib_0.1.4 compiler_4.3.0 rstudioapi_0.14 tools_4.3.0 #\u0026gt; [17] evaluate_0.21 bslib_0.5.0 yaml_2.3.7 jsonlite_1.8.5 #\u0026gt; [21] rlang_1.1.1 ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"a183bbb710fb064d046ae3073cf85628","permalink":"https://www.tidymass.org/docs/chapter1/3-docker_tidymass/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter1/3-docker_tidymass/","section":"docs","summary":"Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. So it is useful for people who want to share the code, data, and even analysis environment with other people to repeat their analysis and results.","tags":null,"title":"Docker version of tidymass","type":"book"},{"authors":null,"categories":null,"content":"Introduction If you want to construct databases for metid, you can use the massDatabase package. massdatabase is an R package that operates the online public databases and combines with other tools for streamlined compound annotation and pathway enrichment analysis. massdatabase is a flexible, simple, and powerful tool that can be installed on all platforms, allowing the users to leverage all the online public databases for biological function mining.\nInstall massdatabase You can install massdatabase from GitLab.\nif(!require(remotes)){ install.packages(\u0026#34;remotes\u0026#34;) } remotes::install_gitlab(\u0026#34;jaspershen/massdatabase\u0026#34;) or GitHub\nremotes::install_github(\u0026#34;tidymass/massdatabase\u0026#34;) or tidymass.org\nsource(\u0026#34;https://www.tidymass.org/tidymass-packages/install_tidymass.txt\u0026#34;) install_tidymass(from = \u0026#34;tidymass.org\u0026#34;, which_package = \u0026#34;massdatabase\u0026#34;) BIGG database BIGG modelis a knowledge base of genome-scale metabolic network reconstructions.\nDownload the BIGG universal metabolite database:\nlibrary(massdatabase) download_bigg_universal_metabolite(path = \u0026#34;database_construction/\u0026#34;, sleep = 1) Then read and convert it to databaseClass format.\ndata \u0026lt;- read_bigg_universal_metabolite(path = \u0026#34;.\u0026#34;) It may take a while to download the database.\nThen convert it to databaseClass format.\nbigg_database \u0026lt;- convert_bigg_universal2metid(data = data, path = \u0026#34;.\u0026#34;) bigg_database You can save the database to use later.\nsave(bigg_database, file = \u0026#34;database_construction/bigg_database\u0026#34;) ChEBI database Chemical Entities of Biological Interest (ChEBI) is a freely available dictionary of molecular entities focused on ‚Äòsmall‚Äô chemical compounds.\nDownload the ChEBI compound database:\nlibrary(massdatabase) download_chebi_compound(path = \u0026#34;database_construction/\u0026#34;) Then read and convert it to databaseClass format.\ndata \u0026lt;- read_chebi_compound(path = \u0026#34;database_construction\u0026#34;) #\u0026gt; Reading data... Then convert it to databaseClass format.\nchebi_database \u0026lt;- convert_chebi2metid(data = data, path = \u0026#34;database_construction\u0026#34;) #\u0026gt; No POS file in your /var/folders/m8/z8rq9r453dn9rk4zx4cw5_5h0000gn/T//Rtmp7oQCVk/file150b853bd6ecd #\u0026gt; No NEG file in your /var/folders/m8/z8rq9r453dn9rk4zx4cw5_5h0000gn/T//Rtmp7oQCVk/file150b853bd6ecd #\u0026gt; Reading metabolite information... #\u0026gt; Reading positive MS2 data... #\u0026gt; Reading negative MS2 data... #\u0026gt; Matching metabolites with MS2 spectra (positive)... #\u0026gt; Matching metabolites with MS2 spectra (negative)... #\u0026gt; All done! chebi_database #\u0026gt; -----------Base information------------ #\u0026gt; Version:2023-09-02 #\u0026gt; Source:CHEBI #\u0026gt; Link:https://www.ebi.ac.uk/chebi/init.do #\u0026gt; Creater:Xiaotao Shen(shenxt@stanford.edu) #\u0026gt; Without RT informtaion #\u0026gt; -----------Spectral information------------ #\u0026gt; 34 items of metabolite information: #\u0026gt; Lab.ID; Compound.name; mz; RT; CAS.ID; HMDB.ID; KEGG.ID; Formula; mz.pos; mz.neg (top10) #\u0026gt; 152379 metabolites in total. #\u0026gt; 0 metabolites with spectra in positive mode. #\u0026gt; 0 metabolites with spectra in negative mode. #\u0026gt; Collision energy in positive mode (number:): #\u0026gt; Total number:0 #\u0026gt; #\u0026gt; Collision energy in negative mode: #\u0026gt; Total number:0 #\u0026gt; You can save the database to use later.\nsave(chebi_database, file = \u0026#34;database_construction/chebi_database\u0026#34;) FooDB database FooDB is the world‚Äôs largest and most comprehensive resource on food constituents, chemistry and biology.\nDownload the FooDB database:\nlibrary(massdatabase) download_foodb_compound(compound_id = \u0026#34;all\u0026#34;, path = \u0026#34;database_construction/\u0026#34;) It may take a while to download the database.\nThen read and convert it to databaseClass format.\ndata \u0026lt;- read_foodb_compound(path = \u0026#34;database_construction\u0026#34;) Then convert it to databaseClass format.\nfoodb_dataabse \u0026lt;- convert_foodb2metid(data = data, path = \u0026#34;database_construction\u0026#34;) foodb_dataabse You can save the database to use later.\nsave(foodb_dataabse, file = \u0026#34;database_construction/foodb_dataabse\u0026#34;) GNPS database The GNPS GNPS is a web-based mass spectrometry ecosystem that aims to be an open-access knowledge base for community-wide organization and sharing of raw, processed, or annotated fragmentation mass spectrometry data (MS/MS). GNPS aids in identification and discovery throughout the entire life cycle of data; from initial data acquisition/analysis to post publication.\nDownload the database:\nlibrary(massdatabase) download_gnps_spectral_library(gnps_library = \u0026#34;HMDB\u0026#34;, path = \u0026#34;database_construction\u0026#34;) The argument gnps_library should be one of the GNPS Library one this website.\nhttps://gnps-external.ucsd.edu/gnpslibrary\nIt may take a while to download the database.\nThen read and convert it to databaseClass format.\ndata \u0026lt;- read_msp_data_gnps(file = \u0026#34;database_construction/HMDB.msp\u0026#34;) #\u0026gt; indexing HMDB.msp [========================================] 97.85GB/s, eta: 0s #\u0026gt; 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Then convert it to databaseClass format.\ngnps_database \u0026lt;- convert_gnps2metid(data = data, path = \u0026#34;database_construction/\u0026#34;) #\u0026gt; Extracting MS1 inforamtion... #\u0026gt; 1% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Done. #\u0026gt; Extracting MS2 inforamtion... #\u0026gt; ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"0cbf0530eeb9387167a65676ae9c92ec","permalink":"https://www.tidymass.org/docs/chapter7/3-construct_public_databases/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter7/3-construct_public_databases/","section":"docs","summary":"Introduction If you want to construct databases for metid, you can use the massDatabase package. massdatabase is an R package that operates the online public databases and combines with other tools for streamlined compound annotation and pathway enrichment analysis.","tags":null,"title":"Construct public databases","type":"book"},{"authors":null,"categories":null,"content":"You can build your own docker image, which contains all your code, data and analysis environment, which is more efficient for reproducible analysis.\nCreate dockerfile Create a dockerfile without extension. And then open and modify it.\nFROM jaspershen/tidymass:latest MAINTAINER \u0026#34;Xiaotao Shen\u0026#34; shenxt1990@outlook.com RUN apt-get update \u0026amp;\u0026amp; apt-get install -y curl COPY demo_data/ /home/rstudio/demo_data/ RUN chmod 777 /home/rstudio/demo_data/ RUN R -e \u0026#39;install.packages(\u0026#34;remotes\u0026#34;)\u0026#39; RUN R -e \u0026#34;remotes::install_gitlab(\u0026#39;jaspershen/tidymass\u0026#39;)\u0026#34; If you want to install packages (for example ggraph) which are necessary for you analysis, please add a new line:\nRUN R -e \u0026#39;install.packages(\u0026#34;ggraph\u0026#34;)\u0026#39; And you also need to copy your data to the image use the COPY.\nBuild image In the terminal, use below code to build the image.\ndocker build -t image-name -f Dockerfile . Change the image-name.\nUse the docker tag command to give the tidymass image a new name We need to create a account on the docker hub (https://hub.docker.com/) and then use the next code to link the local image to our account.\ndocker tag image-name your-account/image-name:latest Push image to docker hub docker push your-account/image-name:latest Then other people can download your image which contains your code, data and analysis environment, which make it is pretty easy to repeat your analysis and results.\nHow to pull docker image and run it can refer this document.\nSession information sessionInfo() #\u0026gt; R version 4.3.0 (2023-04-21) #\u0026gt; Platform: x86_64-apple-darwin20 (64-bit) #\u0026gt; Running under: macOS Ventura 13.5.1 #\u0026gt; #\u0026gt; Matrix products: default #\u0026gt; BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib #\u0026gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 #\u0026gt; #\u0026gt; locale: #\u0026gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #\u0026gt; #\u0026gt; time zone: America/Los_Angeles #\u0026gt; tzcode source: internal #\u0026gt; #\u0026gt; attached base packages: #\u0026gt; [1] stats graphics grDevices utils datasets methods base #\u0026gt; #\u0026gt; loaded via a namespace (and not attached): #\u0026gt; [1] digest_0.6.31 R6_2.5.1 bookdown_0.34 fastmap_1.1.1 #\u0026gt; [5] xfun_0.39 blogdown_1.18.1 cachem_1.0.8 knitr_1.43 #\u0026gt; [9] htmltools_0.5.5 rmarkdown_2.22 cli_3.6.1 sass_0.4.6 #\u0026gt; [13] jquerylib_0.1.4 compiler_4.3.0 rstudioapi_0.14 tools_4.3.0 #\u0026gt; [17] evaluate_0.21 bslib_0.5.0 yaml_2.3.7 jsonlite_1.8.5 #\u0026gt; [21] rlang_1.1.1 ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"58cf9047524330f9d71ff0b8e9cefc6c","permalink":"https://www.tidymass.org/docs/chapter1/4-build_own_docker/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter1/4-build_own_docker/","section":"docs","summary":"You can build your own docker image, which contains all your code, data and analysis environment, which is more efficient for reproducible analysis.\nCreate dockerfile Create a dockerfile without extension. And then open and modify it.","tags":null,"title":"Build your own docker image based on tidymass","type":"book"},{"authors":null,"categories":null,"content":"Use extract_xxx functions We first created a mass_dataset class object.\nlibrary(massdataset) library(tidyverse) data(\u0026#34;expression_data\u0026#34;) data(\u0026#34;sample_info\u0026#34;) data(\u0026#34;sample_info_note\u0026#34;) data(\u0026#34;variable_info\u0026#34;) data(\u0026#34;variable_info_note\u0026#34;) object = create_mass_dataset( expression_data = expression_data, sample_info = sample_info, variable_info = variable_info, sample_info_note = sample_info_note, variable_info_note = variable_info_note ) object #\u0026gt; -------------------- #\u0026gt; massdataset version: 1.0.25 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 1000 x 8 data.frame] #\u0026gt; 2.sample_info:[ 8 x 4 data.frame] #\u0026gt; 8 samples:Blank_3 Blank_4 QC_1 ... PS4P3 PS4P4 #\u0026gt; 3.variable_info:[ 1000 x 3 data.frame] #\u0026gt; 1000 variables:M136T55_2_POS M79T35_POS M307T548_POS ... M232T937_POS M301T277_POS #\u0026gt; 4.sample_info_note:[ 4 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 0 variables x 0 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 1 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2023-09-03 10:40:06 In massdataset package, there are a series of functions named as extract_xxx(), users can use them to extract data from mass_dataset calss object.\n##sample_info extract_sample_info(object) #\u0026gt; sample_id injection.order class group #\u0026gt; 1 Blank_3 1 Blank Blank #\u0026gt; 2 Blank_4 2 Blank Blank #\u0026gt; 3 QC_1 3 QC QC #\u0026gt; 4 QC_2 4 QC QC #\u0026gt; 5 PS4P1 5 Subject Subject #\u0026gt; 6 PS4P2 6 Subject Subject #\u0026gt; 7 PS4P3 7 Subject Subject #\u0026gt; 8 PS4P4 8 Subject Subject ##variable_info extract_variable_info(object) %\u0026gt;% head() #\u0026gt; variable_id mz rt #\u0026gt; 1 M136T55_2_POS 136.06140 54.97902 #\u0026gt; 2 M79T35_POS 79.05394 35.36550 #\u0026gt; 3 M307T548_POS 307.14035 547.56641 #\u0026gt; 4 M183T224_POS 183.06209 224.32777 #\u0026gt; 5 M349T47_POS 349.01584 47.00262 #\u0026gt; 6 M182T828_POS 181.99775 828.35712 ##expression_data extract_expression_data(object) %\u0026gt;% head() #\u0026gt; Blank_3 Blank_4 QC_1 QC_2 PS4P1 PS4P2 PS4P3 #\u0026gt; M136T55_2_POS NA NA 1857924.8 1037763.8 1494436.1 3496912.1 1959179 #\u0026gt; M79T35_POS NA NA 2821550.2 1304875.3 2471336.1 3333582.7 2734244 #\u0026gt; M307T548_POS NA NA 410387.6 273687.8 288590.2 137297.5 NA #\u0026gt; M183T224_POS NA NA NA NA NA 5059068.1 5147422 #\u0026gt; M349T47_POS NA NA 8730104.8 4105598.5 5141073.2 8424315.6 7896633 #\u0026gt; M182T828_POS 3761893 2572593 NA 3662819.1 5700534.8 4600172.4 5557015 #\u0026gt; PS4P4 #\u0026gt; M136T55_2_POS 1005418.8 #\u0026gt; M79T35_POS 3361452.3 #\u0026gt; M307T548_POS 271318.3 #\u0026gt; M183T224_POS NA #\u0026gt; M349T47_POS 6441449.0 #\u0026gt; M182T828_POS 4433034.2 ##sample_info_note extract_sample_info_note(object) #\u0026gt; name meaning #\u0026gt; 1 sample_id sample_id #\u0026gt; 2 injection.order injection.order #\u0026gt; 3 class class #\u0026gt; 4 group group ##variable_info_note extract_variable_info_note(object) #\u0026gt; name meaning #\u0026gt; 1 variable_id variable_id #\u0026gt; 2 mz mz #\u0026gt; 3 rt rt ##ms2_data extract_ms2_data(object) #\u0026gt; list() ##process_info extract_annotation_table(object) #\u0026gt; data frame with 0 columns and 0 rows ##process_info extract_process_info(object) #\u0026gt; $create_mass_dataset #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: create_mass_dataset() #\u0026gt; time: 2023-09-03 10:40:06.394313 #\u0026gt; parameters: #\u0026gt; no : no Use slot() function slot(object = object, name = \u0026#34;sample_info\u0026#34;) #\u0026gt; sample_id injection.order class group #\u0026gt; 1 Blank_3 1 Blank Blank #\u0026gt; 2 Blank_4 2 Blank Blank #\u0026gt; 3 QC_1 3 QC QC #\u0026gt; 4 QC_2 4 QC QC #\u0026gt; 5 PS4P1 5 Subject Subject #\u0026gt; 6 PS4P2 6 Subject Subject #\u0026gt; 7 PS4P3 7 Subject Subject #\u0026gt; 8 PS4P4 8 Subject Subject slot(object = object, name = \u0026#34;variable_info\u0026#34;) %\u0026gt;% head() #\u0026gt; variable_id mz rt #\u0026gt; 1 M136T55_2_POS 136.06140 54.97902 #\u0026gt; 2 M79T35_POS 79.05394 35.36550 #\u0026gt; 3 M307T548_POS 307.14035 547.56641 #\u0026gt; 4 M183T224_POS 183.06209 224.32777 #\u0026gt; 5 M349T47_POS 349.01584 47.00262 #\u0026gt; 6 M182T828_POS 181.99775 828.35712 slot(object = object, name = \u0026#34;expression_data\u0026#34;) %\u0026gt;% head() #\u0026gt; Blank_3 Blank_4 QC_1 QC_2 PS4P1 PS4P2 PS4P3 #\u0026gt; M136T55_2_POS NA NA 1857924.8 1037763.8 1494436.1 3496912.1 1959179 #\u0026gt; M79T35_POS NA NA 2821550.2 1304875.3 2471336.1 3333582.7 2734244 #\u0026gt; M307T548_POS NA NA 410387.6 273687.8 288590.2 137297.5 NA #\u0026gt; M183T224_POS NA NA NA NA NA 5059068.1 5147422 #\u0026gt; M349T47_POS NA NA 8730104.8 4105598.5 5141073.2 8424315.6 7896633 #\u0026gt; M182T828_POS 3761893 2572593 NA 3662819.1 5700534.8 4600172.4 5557015 #\u0026gt; PS4P4 #\u0026gt; M136T55_2_POS 1005418.8 #\u0026gt; M79T35_POS 3361452.3 #\u0026gt; M307T548_POS 271318.3 #\u0026gt; M183T224_POS NA #\u0026gt; M349T47_POS 6441449.0 #\u0026gt; M182T828_POS 4433034.2 slot(object = object, name = \u0026#34;sample_info_note\u0026#34;) #\u0026gt; name meaning #\u0026gt; 1 sample_id sample_id #\u0026gt; 2 injection.order injection.order #\u0026gt; 3 class class #\u0026gt; 4 group group slot(object = object, name = \u0026#34;variable_info_note\u0026#34;) #\u0026gt; name meaning #\u0026gt; 1 variable_id variable_id #\u0026gt; 2 mz mz #\u0026gt; 3 rt rt slot(object = object, name = \u0026#34;ms2_data\u0026#34;) #\u0026gt; list() slot(object = object, name = \u0026#34;process_info\u0026#34;) #\u0026gt; $create_mass_dataset #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: create_mass_dataset() #\u0026gt; time: 2023-09-03 10:40:06.394313 #\u0026gt; parameters: #\u0026gt; no : no slot(object = object, name = ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"c31105d5f284248c420c47c6a134d0ee","permalink":"https://www.tidymass.org/docs/chapter2/4-extract/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter2/4-extract/","section":"docs","summary":"Use extract_xxx functions We first created a mass_dataset class object.\nlibrary(massdataset) library(tidyverse) data(\"expression_data\") data(\"sample_info\") data(\"sample_info_note\") data(\"variable_info\") data(\"variable_info_note\") object = create_mass_dataset( expression_data = expression_data, sample_info = sample_info, variable_info = variable_info, sample_info_note = sample_info_note, variable_info_note = variable_info_note ) object #\u003e -------------------- #\u003e massdataset version: 1.","tags":null,"title":"Extract data from mass_dataset","type":"book"},{"authors":null,"categories":null,"content":"Data preparation We just use the dataset which are from previous step.\nlibrary(tidymass) #\u0026gt; Registered S3 method overwritten by \u0026#39;Hmisc\u0026#39;: #\u0026gt; method from #\u0026gt; vcov.default fit.models #\u0026gt; ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.0.8 ‚îÄ‚îÄ #\u0026gt; ‚úî massdataset 1.0.25 ‚úî metid 1.2.29 #\u0026gt; ‚úî massprocesser 1.0.10 ‚úî masstools 1.0.10 #\u0026gt; ‚úî masscleaner 1.0.11 ‚úî dplyr 1.1.2 #\u0026gt; ‚úî massqc 1.0.6 ‚úî ggplot2 3.4.2 #\u0026gt; ‚úî massstat 1.0.5 ‚úî magrittr 2.0.3 #\u0026gt; ‚úî metpath 1.0.8 load(\u0026#34;data_cleaning/POS/object_pos2\u0026#34;) load(\u0026#34;data_cleaning/NEG/object_neg2\u0026#34;) Add MS2 spectra data to mass_dataset class Download the MS2 data here.\nUncompress it.\nPositive mode object_pos2 \u0026lt;- mutate_ms2( object = object_pos2, column = \u0026#34;rp\u0026#34;, polarity = \u0026#34;positive\u0026#34;, ms1.ms2.match.mz.tol = 15, ms1.ms2.match.rt.tol = 30, path = \u0026#34;mgf_ms2_data/POS\u0026#34; ) #\u0026gt; Reading mgf data... #\u0026gt; Reading mgf data... #\u0026gt; Reading mgf data... #\u0026gt; Reading mgf data... #\u0026gt; 1042 out of 5101 variable have MS2 spectra. #\u0026gt; Selecting the most intense MS2 spectrum for each peak... object_pos2 #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.8 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 5101 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 6 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 5101 x 6 data.frame] #\u0026gt; 5101 variables:M70T53_POS M70T527_POS M71T775_POS ... M836T610_POS M836T759_POS #\u0026gt; 4.sample_info_note:[ 6 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 6 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 1042 variables x 951 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 9 processings in total #\u0026gt; Latest 3 processings show #\u0026gt; normalize_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 masscleaner normalize_data() 2023-08-30 23:10:01 #\u0026gt; integrate_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 masscleaner integrate_data() 2023-08-30 23:10:03 #\u0026gt; mutate_ms2 ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate_ms2() 2023-09-02 10:24:42 extract_ms2_data(object_pos2) #\u0026gt; $`QEP_SGA_QC_posi_ms2_ce25_01.mgf;QEP_SGA_QC_posi_ms2_ce25_02.mgf;QEP_SGA_QC_posi_ms2_ce50_01.mgf;QEP_SGA_QC_posi_ms2_ce50_02.mgf` #\u0026gt; -------------------- #\u0026gt; column: rp #\u0026gt; polarity: positive #\u0026gt; mz_tol: 15 #\u0026gt; rt_tol (second): 30 #\u0026gt; -------------------- #\u0026gt; 1042 variables: #\u0026gt; M71T775_POS M72T53_POS M83T50_POS M84T57_POS M85T54_POS... #\u0026gt; 951 MS2 spectra. #\u0026gt; mz70.981170654297rt775.4286 mz72.081642150879rt53.6528862 mz82.945625305176rt49.238013 mz84.045127868652rt59.6895132 mz85.029016959043rt53.0835648... Negative mode object_neg2 \u0026lt;- mutate_ms2( object = object_neg2, column = \u0026#34;rp\u0026#34;, polarity = \u0026#34;negative\u0026#34;, ms1.ms2.match.mz.tol = 15, ms1.ms2.match.rt.tol = 30, path = \u0026#34;mgf_ms2_data/NEG\u0026#34; ) #\u0026gt; Reading mgf data... #\u0026gt; Reading mgf data... #\u0026gt; Reading mgf data... #\u0026gt; Reading mgf data... #\u0026gt; 1092 out of 4104 variable have MS2 spectra. #\u0026gt; Selecting the most intense MS2 spectrum for each peak... object_neg2 #\u0026gt; -------------------- #\u0026gt; massdataset version: 0.99.8 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 4104 x 259 data.frame] #\u0026gt; 2.sample_info:[ 259 x 6 data.frame] #\u0026gt; 259 samples:sample_06 sample_103 sample_11 ... sample_QC_38 sample_QC_39 #\u0026gt; 3.variable_info:[ 4104 x 6 data.frame] #\u0026gt; 4104 variables:M70T712_NEG M70T587_NEG M71T587_NEG ... M884T57_NEG M899T56_NEG #\u0026gt; 4.sample_info_note:[ 6 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 6 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 1092 variables x 988 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 9 processings in total #\u0026gt; Latest 3 processings show #\u0026gt; normalize_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 masscleaner normalize_data() 2023-08-30 23:10:13 #\u0026gt; integrate_data ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 masscleaner integrate_data() 2023-08-30 23:10:14 #\u0026gt; mutate_ms2 ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate_ms2() 2023-09-02 10:25:08 extract_ms2_data(object_neg2) #\u0026gt; $`QEP_SGA_QC_neg_ms2_ce25_01.mgf;QEP_SGA_QC_neg_ms2_ce25_02.mgf;QEP_SGA_QC_neg_ms2_ce50_01.mgf;QEP_SGA_QC_neg_ms2_ce50_02.mgf` #\u0026gt; -------------------- #\u0026gt; column: rp #\u0026gt; polarity: negative #\u0026gt; mz_tol: 15 #\u0026gt; rt_tol (second): 30 #\u0026gt; -------------------- #\u0026gt; 1092 variables: #\u0026gt; M71T51_NEG M73T74_NEG M75T52_NEG M80T299_NEG M80T232_NEG... #\u0026gt; 988 MS2 spectra. #\u0026gt; mz71.012359619141rt52.3270968 mz73.02799987793rt74.779476 mz75.007308959961rt24.1557228 mz79.955728954783rt301.268466 mz79.955834350356rt235.127328... Metabolite annotation Metabolite annotation is based on the metid package.\nDownload database We need to download MS2 database from metid website.\nHere we download the Michael Snyder RPLC databases, Orbitrap database and MoNA database. And place them in a new folder named as metabolite_annotation.\nPositive mode Annotate features using snyder_database_rplc0.0.3. load(\u0026#34;metabolite_annotation/snyder_database_rplc0.0.3.rda\u0026#34;) snyder_database_rplc0.0.3 #\u0026gt; -----------Base information------------ #\u0026gt; Version:0.0.2 #\u0026gt; Source:MS #\u0026gt; Link:http://snyderlab.stanford.edu/ #\u0026gt; Creater:Xiaotao Shen(shenxt1990@163.com) #\u0026gt; With RT ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"ad209aa2fbd63182e28c38b02b830b3c","permalink":"https://www.tidymass.org/docs/chapter7/4-metabolite_annotation/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter7/4-metabolite_annotation/","section":"docs","summary":"Data preparation We just use the dataset which are from previous step.\nlibrary(tidymass) #\u003e Registered S3 method overwritten by 'Hmisc': #\u003e method from #\u003e vcov.default fit.models #\u003e ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymass 1.","tags":null,"title":"Metabolite annotation: An example","type":"book"},{"authors":null,"categories":null,"content":"Some times we only want to match one peak. We can use identify_single_peak() function to identify single peak.\nData preparation library(massdataset) library(tidyverse) library(metid) ms1_data = readr::read_csv(file.path( system.file(\u0026#34;ms1_peak\u0026#34;, package = \u0026#34;metid\u0026#34;), \u0026#34;ms1.peak.table.csv\u0026#34; )) ms1_data = data.frame(ms1_data, sample1 = 1, sample2 = 2) expression_data = ms1_data %\u0026gt;% dplyr::select(-c(name:rt)) variable_info = ms1_data %\u0026gt;% dplyr::select(name:rt) %\u0026gt;% dplyr::rename(variable_id = name) sample_info = data.frame( sample_id = colnames(expression_data), injection.order = c(1, 2), class = c(\u0026#34;Subject\u0026#34;, \u0026#34;Subject\u0026#34;), group = c(\u0026#34;Subject\u0026#34;, \u0026#34;Subject\u0026#34;) ) rownames(expression_data) = variable_info$variable_id object = create_mass_dataset( expression_data = expression_data, sample_info = sample_info, variable_info = variable_info ) object #\u0026gt; -------------------- #\u0026gt; massdataset version: 1.0.25 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 100 x 2 data.frame] #\u0026gt; 2.sample_info:[ 2 x 4 data.frame] #\u0026gt; 2 samples:sample1 sample2 #\u0026gt; 3.variable_info:[ 100 x 3 data.frame] #\u0026gt; 100 variables:pRPLC_376 pRPLC_391 pRPLC_603 ... pRPLC_21734 pRPLC_22098 #\u0026gt; 4.sample_info_note:[ 4 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 0 variables x 0 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 1 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2023-09-02 10:42:06 Add MS2 to mass_dataset object path = \u0026#34;./metabolite_annotation\u0026#34; dir.create(path) ms2_data \u0026lt;- system.file(\u0026#34;ms2_data\u0026#34;, package = \u0026#34;metid\u0026#34;) file.copy( from = file.path(ms2_data, \u0026#34;QC1_MSMS_NCE25.mgf\u0026#34;), to = path, overwrite = TRUE, recursive = TRUE ) #\u0026gt; [1] FALSE object = massdataset::mutate_ms2( object = object, column = \u0026#34;rp\u0026#34;, polarity = \u0026#34;positive\u0026#34;, ms1.ms2.match.mz.tol = 10, ms1.ms2.match.rt.tol = 30, path = path ) object #\u0026gt; -------------------- #\u0026gt; massdataset version: 1.0.25 #\u0026gt; -------------------- #\u0026gt; 1.expression_data:[ 100 x 2 data.frame] #\u0026gt; 2.sample_info:[ 2 x 4 data.frame] #\u0026gt; 2 samples:sample1 sample2 #\u0026gt; 3.variable_info:[ 100 x 3 data.frame] #\u0026gt; 100 variables:pRPLC_376 pRPLC_391 pRPLC_603 ... pRPLC_21734 pRPLC_22098 #\u0026gt; 4.sample_info_note:[ 4 x 2 data.frame] #\u0026gt; 5.variable_info_note:[ 3 x 2 data.frame] #\u0026gt; 6.ms2_data:[ 16 variables x 16 MS2 spectra] #\u0026gt; -------------------- #\u0026gt; Processing information #\u0026gt; 2 processings in total #\u0026gt; create_mass_dataset ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset create_mass_dataset() 2023-09-02 10:42:06 #\u0026gt; mutate_ms2 ---------- #\u0026gt; Package Function.used Time #\u0026gt; 1 massdataset mutate_ms2() 2023-09-02 10:52:12 object@ms2_data #\u0026gt; $QC1_MSMS_NCE25.mgf #\u0026gt; -------------------- #\u0026gt; column: rp #\u0026gt; polarity: positive #\u0026gt; mz_tol: 10 #\u0026gt; rt_tol (second): 30 #\u0026gt; -------------------- #\u0026gt; 16 variables: #\u0026gt; pRPLC_603 pRPLC_1112 pRPLC_1307 pRPLC_1860 pRPLC_3927... #\u0026gt; 16 MS2 spectra. #\u0026gt; mz162.112344859731rt35.281947 mz209.092013478675rt62.786886 mz314.232098215226rt415.887162 mz249.184679448673rt585.115404 mz232.154251098633rt84.328626... Annotate single peaks data(\u0026#34;snyder_database_rplc0.0.3\u0026#34;, package = \u0026#34;metid\u0026#34;) annotate_single_peak_mass_dataset( object = object, variable_index = 3, based_on_rt = FALSE, based_on_ms2 = FALSE, database = snyder_database_rplc0.0.3, add_to_annotation_table = FALSE ) #\u0026gt; variable_id ms2_files_id ms2_spectrum_id Compound.name CAS.ID HMDB.ID #\u0026gt; 1 pRPLC_603 NA NA L(-)-Carnitine \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; #\u0026gt; 2 pRPLC_603 NA NA L-Carnitine 541-15-1 HMDB00062 #\u0026gt; KEGG.ID Lab.ID Adduct mz.error mz.match.score RT.error RT.match.score CE SS #\u0026gt; 1 \u0026lt;NA\u0026gt; RPLC_54 (M+H)+ 0.05375 0.9999977 NA NA NA NA #\u0026gt; 2 C00318 RPLC_406 (M+H)+ 1.86625 0.9972176 NA NA NA NA #\u0026gt; Total.score Database Level #\u0026gt; 1 0.9999977 MS_0.0.2 3 #\u0026gt; 2 0.9972176 MS_0.0.2 3 annotate_single_peak_mass_dataset( object = object, variable_index = 3, based_on_rt = TRUE, based_on_ms2 = FALSE, database = snyder_database_rplc0.0.3, add_to_annotation_table = FALSE ) #\u0026gt; variable_id ms2_files_id ms2_spectrum_id Compound.name CAS.ID HMDB.ID #\u0026gt; 1 pRPLC_603 NA NA L(-)-Carnitine \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; #\u0026gt; 2 pRPLC_603 NA NA L-Carnitine 541-15-1 HMDB00062 #\u0026gt; KEGG.ID Lab.ID Adduct mz.error mz.match.score RT.error RT.match.score CE SS #\u0026gt; 1 \u0026lt;NA\u0026gt; RPLC_54 (M+H)+ 0.05375 0.9999977 0.746 0.9996909 NA NA #\u0026gt; 2 C00318 RPLC_406 (M+H)+ 1.86625 0.9972176 2.254 0.9971815 NA NA #\u0026gt; Total.score Database Level #\u0026gt; 1 0.9998443 MS_0.0.2 2 #\u0026gt; 2 0.9971995 MS_0.0.2 2 annotate_single_peak_mass_dataset( object = object, variable_index = 3, based_on_rt = TRUE, based_on_ms2 = TRUE, database = snyder_database_rplc0.0.3, add_to_annotation_table = FALSE ) #\u0026gt; | | | 0% | |==== | 6% | |========= | 12% | |============= | 19% | |================== | 25% | |====================== | 31% | |========================== | 38% | |=============================== | 44% | |=================================== | 50% | |======================================= | 56% | |============================================ | 62% | |================================================ | ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"41513c6fa618907fc961dc7957ac6c7d","permalink":"https://www.tidymass.org/docs/chapter7/5-identify_single_peak/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter7/5-identify_single_peak/","section":"docs","summary":"Some times we only want to match one peak. We can use identify_single_peak() function to identify single peak.\nData preparation library(massdataset) library(tidyverse) library(metid) ms1_data = readr::read_csv(file.path( system.file(\"ms1_peak\", package = \"metid\"), \"ms1.","tags":null,"title":"Identify single peak with metid","type":"book"},{"authors":null,"categories":null,"content":"Data preparation In mass_dataset class object, it contains all the processing information in it. We can trace the analysis and parameters so we can do the reproducible analysis.\nlibrary(massdataset) data(\u0026#34;expression_data\u0026#34;) data(\u0026#34;sample_info\u0026#34;) data(\u0026#34;variable_info\u0026#34;) object = create_mass_dataset( expression_data = expression_data, sample_info = sample_info, variable_info = variable_info ) library(tidyverse) object = object %\u0026gt;% activate_mass_dataset(what = \u0026#34;expression_data\u0026#34;) %\u0026gt;% filter(!is.na(QC_1)) object = object %\u0026gt;% activate_mass_dataset(what = \u0026#34;expression_data\u0026#34;) %\u0026gt;% filter(!is.na(QC_2)) object = object %\u0026gt;% mutate_mean_intensity() object = object %\u0026gt;% mutate_median_intensity() %\u0026gt;% mutate_rsd() process_info process_info = extract_process_info(object) process_info #\u0026gt; $create_mass_dataset #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: create_mass_dataset() #\u0026gt; time: 2023-09-03 10:46:22.299476 #\u0026gt; parameters: #\u0026gt; no : no #\u0026gt; #\u0026gt; $filter #\u0026gt; $filter[[1]] #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: filter() #\u0026gt; time: 2023-09-03 10:46:22.712919 #\u0026gt; parameters: #\u0026gt; parameter : `~!is.na(QC_1)` #\u0026gt; #\u0026gt; $filter[[2]] #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: filter() #\u0026gt; time: 2023-09-03 10:46:22.716696 #\u0026gt; parameters: #\u0026gt; parameter : `~!is.na(QC_2)` #\u0026gt; #\u0026gt; #\u0026gt; $mutate_mean_intensity #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: mutate_mean_intensity() #\u0026gt; time: 2023-09-03 10:46:22.724256 #\u0026gt; parameters: #\u0026gt; according_to_samples : c(\u0026#34;Blank_3\u0026#34;, \u0026#34;Blank_4\u0026#34;, \u0026#34;QC_1\u0026#34;, \u0026#34;QC_2\u0026#34;, \u0026#34;PS4P1\u0026#34;, \u0026#34;PS4P2\u0026#34;, \u0026#34;PS4P3\u0026#34;, \u0026#34;PS4P4\u0026#34;) #\u0026gt; #\u0026gt; $mutate_median_intensity #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: mutate_median_intensity() #\u0026gt; time: 2023-09-03 10:46:22.747706 #\u0026gt; parameters: #\u0026gt; according_to_samples : c(\u0026#34;Blank_3\u0026#34;, \u0026#34;Blank_4\u0026#34;, \u0026#34;QC_1\u0026#34;, \u0026#34;QC_2\u0026#34;, \u0026#34;PS4P1\u0026#34;, \u0026#34;PS4P2\u0026#34;, \u0026#34;PS4P3\u0026#34;, \u0026#34;PS4P4\u0026#34;) #\u0026gt; #\u0026gt; $mutate_rsd #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: mutate_rsd() #\u0026gt; time: 2023-09-03 10:46:22.760049 #\u0026gt; parameters: #\u0026gt; according_to_samples : c(\u0026#34;Blank_3\u0026#34;, \u0026#34;Blank_4\u0026#34;, \u0026#34;QC_1\u0026#34;, \u0026#34;QC_2\u0026#34;, \u0026#34;PS4P1\u0026#34;, \u0026#34;PS4P2\u0026#34;, \u0026#34;PS4P3\u0026#34;, \u0026#34;PS4P4\u0026#34;) The process_info contains all the steps which are ordered by time.\nprocess_info$mutate_median_intensity #\u0026gt; -------------------- #\u0026gt; pacakge_name: massdataset #\u0026gt; function_name: mutate_median_intensity() #\u0026gt; time: 2023-09-03 10:46:22.747706 #\u0026gt; parameters: #\u0026gt; according_to_samples : c(\u0026#34;Blank_3\u0026#34;, \u0026#34;Blank_4\u0026#34;, \u0026#34;QC_1\u0026#34;, \u0026#34;QC_2\u0026#34;, \u0026#34;PS4P1\u0026#34;, \u0026#34;PS4P2\u0026#34;, \u0026#34;PS4P3\u0026#34;, \u0026#34;PS4P4\u0026#34;) process_info$mutate_median_intensity@parameter #\u0026gt; $according_to_samples #\u0026gt; [1] \u0026#34;Blank_3\u0026#34; \u0026#34;Blank_4\u0026#34; \u0026#34;QC_1\u0026#34; \u0026#34;QC_2\u0026#34; \u0026#34;PS4P1\u0026#34; \u0026#34;PS4P2\u0026#34; \u0026#34;PS4P3\u0026#34; #\u0026gt; [8] \u0026#34;PS4P4\u0026#34; Output html processing information We can output the process_info into a html format file, so we can know what processing steps have been made to this object and the accurate parameters.\nThen we can use report_parameters() to output this into a html file.\nreport_parameters(object = object, path = \u0026#34;data_cleaning\u0026#34;) A html file named as parameter_report.html will be generated and saved in data_cleaning folder.\nSession information sessionInfo() #\u0026gt; R version 4.3.0 (2023-04-21) #\u0026gt; Platform: x86_64-apple-darwin20 (64-bit) #\u0026gt; Running under: macOS Ventura 13.5.1 #\u0026gt; #\u0026gt; Matrix products: default #\u0026gt; BLAS: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib #\u0026gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; LAPACK version 3.11.0 #\u0026gt; #\u0026gt; locale: #\u0026gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #\u0026gt; #\u0026gt; time zone: America/Los_Angeles #\u0026gt; tzcode source: internal #\u0026gt; #\u0026gt; attached base packages: #\u0026gt; [1] stats graphics grDevices utils datasets methods base #\u0026gt; #\u0026gt; other attached packages: #\u0026gt; [1] lubridate_1.9.2 forcats_1.0.0 stringr_1.5.0 purrr_1.0.1 #\u0026gt; [5] readr_2.1.4 tidyr_1.3.0 tibble_3.2.1 tidyverse_2.0.0 #\u0026gt; [9] ggplot2_3.4.2 dplyr_1.1.2 magrittr_2.0.3 masstools_1.0.10 #\u0026gt; [13] massdataset_1.0.25 #\u0026gt; #\u0026gt; loaded via a namespace (and not attached): #\u0026gt; [1] bitops_1.0-7 pbapply_1.7-0 #\u0026gt; [3] remotes_2.4.2 rlang_1.1.1 #\u0026gt; [5] clue_0.3-64 GetoptLong_1.0.5 #\u0026gt; [7] matrixStats_1.0.0 compiler_4.3.0 #\u0026gt; [9] png_0.1-8 vctrs_0.6.2 #\u0026gt; [11] ProtGenerics_1.32.0 pkgconfig_2.0.3 #\u0026gt; [13] shape_1.4.6 crayon_1.5.2 #\u0026gt; [15] fastmap_1.1.1 XVector_0.40.0 #\u0026gt; [17] utf8_1.2.3 rmarkdown_2.22 #\u0026gt; [19] tzdb_0.4.0 preprocessCore_1.62.1 #\u0026gt; [21] xfun_0.39 zlibbioc_1.46.0 #\u0026gt; [23] cachem_1.0.8 GenomeInfoDb_1.36.0 #\u0026gt; [25] jsonlite_1.8.5 DelayedArray_0.26.3 #\u0026gt; [27] BiocParallel_1.34.2 parallel_4.3.0 #\u0026gt; [29] cluster_2.1.4 R6_2.5.1 #\u0026gt; [31] stringi_1.7.12 bslib_0.5.0 #\u0026gt; [33] RColorBrewer_1.1-3 limma_3.56.2 #\u0026gt; [35] GenomicRanges_1.52.0 jquerylib_0.1.4 #\u0026gt; [37] Rcpp_1.0.10 bookdown_0.34 #\u0026gt; [39] SummarizedExperiment_1.30.2 iterators_1.0.14 #\u0026gt; [41] knitr_1.43 IRanges_2.34.0 #\u0026gt; [43] timechange_0.2.0 Matrix_1.5-4 #\u0026gt; [45] tidyselect_1.2.0 rstudioapi_0.14 #\u0026gt; [47] yaml_2.3.7 doParallel_1.0.17 #\u0026gt; [49] codetools_0.2-19 affy_1.78.0 #\u0026gt; [51] blogdown_1.18.1 lattice_0.21-8 #\u0026gt; [53] plyr_1.8.8 withr_2.5.0 #\u0026gt; ‚Ä¶","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"3b6d1aca89a04142058098f6cb22d6a4","permalink":"https://www.tidymass.org/docs/chapter2/5-processing_information/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/chapter2/5-processing_information/","section":"docs","summary":"Data preparation In mass_dataset class object, it contains all the processing information in it. We can trace the analysis and parameters so we can do the reproducible analysis.\nlibrary(massdataset) data(\"expression_data\") data(\"sample_info\") data(\"variable_info\") object = create_mass_dataset( expression_data = expression_data, sample_info = sample_info, variable_info = variable_info ) library(tidyverse) object = object %\u003e% activate_mass_dataset(what = \"expression_data\") %\u003e% filter(!","tags":null,"title":"Processing information in mass_data class","type":"book"},{"authors":null,"categories":null,"content":"","date":1666569600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1666569600,"objectID":"3bf44c81f2a197de01edde90bcd77783","permalink":"https://www.tidymass.org/team/","publishdate":"2022-10-24T00:00:00Z","relpermalink":"/team/","section":"","summary":"","tags":null,"title":"People","type":"landing"},{"authors":null,"categories":["R"],"content":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932 Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA ) Figure 1: A fancy pie chart.\n","date":1606875194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606875194,"objectID":"84a876ba789bb7232be8d9ed2487fd98","permalink":"https://www.tidymass.org/post/2020-12-01-r-rmarkdown/","publishdate":"2020-12-01T21:13:14-05:00","relpermalink":"/post/2020-12-01-r-rmarkdown/","section":"post","summary":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":null,"categories":null,"content":"","date":1579564800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579564800,"objectID":"1f30370c20cb702ead87db4b8d4f5acc","permalink":"https://www.tidymass.org/packages/metnormalizer/","publishdate":"2020-01-21T00:00:00Z","relpermalink":"/packages/metnormalizer/","section":"packages","summary":"","tags":["Metabolomics"],"title":"MetNormalizer","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"4d880f80b05b3b571ed2a302c54a17ce","permalink":"https://www.tidymass.org/packages/massconverter/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/massconverter/","section":"packages","summary":"","tags":["Metabolomics"],"title":"massConverter","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"a5aabc18275726c8f981b8ce111a258a","permalink":"https://www.tidymass.org/packages/massdatabase/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/massdatabase/","section":"packages","summary":"","tags":["Metabolomics"],"title":"massDatabase","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"8c461176e15f975ecb032656735fffc1","permalink":"https://www.tidymass.org/packages/massdataset/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/massdataset/","section":"packages","summary":"","tags":["Metabolomics"],"title":"massDataset","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"e06e6bcd3411527258aaf17fcdf51405","permalink":"https://www.tidymass.org/packages/massprocesser/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/massprocesser/","section":"packages","summary":"","tags":["Metabolomics"],"title":"massProcesser","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"ab4b6cd7773c7b17ffb2f5eaea2a9f06","permalink":"https://www.tidymass.org/packages/massqc/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/massqc/","section":"packages","summary":"","tags":["Metabolomics"],"title":"massQC","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"96482c89e091d49fba35dad657606732","permalink":"https://www.tidymass.org/packages/massstat/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/massstat/","section":"packages","summary":"","tags":["Metabolomics"],"title":"massStat","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"13b3a0b62b060a7cd3299ef593a1dc01","permalink":"https://www.tidymass.org/packages/masstools/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/masstools/","section":"packages","summary":"","tags":["Metabolomics"],"title":"massTools","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"cbca041ec5046ec6b206b99f5324ee83","permalink":"https://www.tidymass.org/packages/masscleaner/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/masscleaner/","section":"packages","summary":"","tags":["Metabolomics"],"title":"metCleaner","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"ce5f4366ce4fc714abdeb64c2e559eac","permalink":"https://www.tidymass.org/packages/metid/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/metid/","section":"packages","summary":"","tags":["Metabolomics"],"title":"metID","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"6496d68882e6691e6b9831add085751f","permalink":"https://www.tidymass.org/packages/metpath/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/metpath/","section":"packages","summary":"","tags":["Metabolomics"],"title":"metPath","type":"packages"},{"authors":null,"categories":null,"content":"","date":1579478400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579478400,"objectID":"6fdb32d867fa6d7443c01a79861723f1","permalink":"https://www.tidymass.org/packages/tidymass/","publishdate":"2020-01-20T00:00:00Z","relpermalink":"/packages/tidymass/","section":"packages","summary":"","tags":["Metabolomics"],"title":"tidyMass","type":"packages"}]